// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/PredicateLabs/predicate-avs/core/types"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

type TaskRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskRepository) EXPECT() *TaskRepository_Expecter {
	return &TaskRepository_Expecter{mock: &_m.Mock}
}

// AddCompliantTaskResponse provides a mock function with given fields: ctx, id, taskResponse
func (_m *TaskRepository) AddCompliantTaskResponse(ctx context.Context, id string, taskResponse types.TaskResponse) error {
	ret := _m.Called(ctx, id, taskResponse)

	if len(ret) == 0 {
		panic("no return value specified for AddCompliantTaskResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TaskResponse) error); ok {
		r0 = rf(ctx, id, taskResponse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_AddCompliantTaskResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCompliantTaskResponse'
type TaskRepository_AddCompliantTaskResponse_Call struct {
	*mock.Call
}

// AddCompliantTaskResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - taskResponse types.TaskResponse
func (_e *TaskRepository_Expecter) AddCompliantTaskResponse(ctx interface{}, id interface{}, taskResponse interface{}) *TaskRepository_AddCompliantTaskResponse_Call {
	return &TaskRepository_AddCompliantTaskResponse_Call{Call: _e.mock.On("AddCompliantTaskResponse", ctx, id, taskResponse)}
}

func (_c *TaskRepository_AddCompliantTaskResponse_Call) Run(run func(ctx context.Context, id string, taskResponse types.TaskResponse)) *TaskRepository_AddCompliantTaskResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.TaskResponse))
	})
	return _c
}

func (_c *TaskRepository_AddCompliantTaskResponse_Call) Return(_a0 error) *TaskRepository_AddCompliantTaskResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_AddCompliantTaskResponse_Call) RunAndReturn(run func(context.Context, string, types.TaskResponse) error) *TaskRepository_AddCompliantTaskResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddErrorTaskResponse provides a mock function with given fields: ctx, id, taskResponse
func (_m *TaskRepository) AddErrorTaskResponse(ctx context.Context, id string, taskResponse types.TaskResponse) error {
	ret := _m.Called(ctx, id, taskResponse)

	if len(ret) == 0 {
		panic("no return value specified for AddErrorTaskResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TaskResponse) error); ok {
		r0 = rf(ctx, id, taskResponse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_AddErrorTaskResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddErrorTaskResponse'
type TaskRepository_AddErrorTaskResponse_Call struct {
	*mock.Call
}

// AddErrorTaskResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - taskResponse types.TaskResponse
func (_e *TaskRepository_Expecter) AddErrorTaskResponse(ctx interface{}, id interface{}, taskResponse interface{}) *TaskRepository_AddErrorTaskResponse_Call {
	return &TaskRepository_AddErrorTaskResponse_Call{Call: _e.mock.On("AddErrorTaskResponse", ctx, id, taskResponse)}
}

func (_c *TaskRepository_AddErrorTaskResponse_Call) Run(run func(ctx context.Context, id string, taskResponse types.TaskResponse)) *TaskRepository_AddErrorTaskResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.TaskResponse))
	})
	return _c
}

func (_c *TaskRepository_AddErrorTaskResponse_Call) Return(_a0 error) *TaskRepository_AddErrorTaskResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_AddErrorTaskResponse_Call) RunAndReturn(run func(context.Context, string, types.TaskResponse) error) *TaskRepository_AddErrorTaskResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddNonCompliantTaskResponse provides a mock function with given fields: ctx, id, taskResponse
func (_m *TaskRepository) AddNonCompliantTaskResponse(ctx context.Context, id string, taskResponse types.TaskResponse) error {
	ret := _m.Called(ctx, id, taskResponse)

	if len(ret) == 0 {
		panic("no return value specified for AddNonCompliantTaskResponse")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.TaskResponse) error); ok {
		r0 = rf(ctx, id, taskResponse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_AddNonCompliantTaskResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNonCompliantTaskResponse'
type TaskRepository_AddNonCompliantTaskResponse_Call struct {
	*mock.Call
}

// AddNonCompliantTaskResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - taskResponse types.TaskResponse
func (_e *TaskRepository_Expecter) AddNonCompliantTaskResponse(ctx interface{}, id interface{}, taskResponse interface{}) *TaskRepository_AddNonCompliantTaskResponse_Call {
	return &TaskRepository_AddNonCompliantTaskResponse_Call{Call: _e.mock.On("AddNonCompliantTaskResponse", ctx, id, taskResponse)}
}

func (_c *TaskRepository_AddNonCompliantTaskResponse_Call) Run(run func(ctx context.Context, id string, taskResponse types.TaskResponse)) *TaskRepository_AddNonCompliantTaskResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.TaskResponse))
	})
	return _c
}

func (_c *TaskRepository_AddNonCompliantTaskResponse_Call) Return(_a0 error) *TaskRepository_AddNonCompliantTaskResponse_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_AddNonCompliantTaskResponse_Call) RunAndReturn(run func(context.Context, string, types.TaskResponse) error) *TaskRepository_AddNonCompliantTaskResponse_Call {
	_c.Call.Return(run)
	return _c
}

// AddTask provides a mock function with given fields: ctx, task
func (_m *TaskRepository) AddTask(ctx context.Context, task types.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_AddTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTask'
type TaskRepository_AddTask_Call struct {
	*mock.Call
}

// AddTask is a helper method to define mock.On call
//   - ctx context.Context
//   - task types.Task
func (_e *TaskRepository_Expecter) AddTask(ctx interface{}, task interface{}) *TaskRepository_AddTask_Call {
	return &TaskRepository_AddTask_Call{Call: _e.mock.On("AddTask", ctx, task)}
}

func (_c *TaskRepository_AddTask_Call) Run(run func(ctx context.Context, task types.Task)) *TaskRepository_AddTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.Task))
	})
	return _c
}

func (_c *TaskRepository_AddTask_Call) Return(_a0 error) *TaskRepository_AddTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_AddTask_Call) RunAndReturn(run func(context.Context, types.Task) error) *TaskRepository_AddTask_Call {
	_c.Call.Return(run)
	return _c
}

// CheckCompliantQuorum provides a mock function with given fields: ctx, id, quorumThresholdCount
func (_m *TaskRepository) CheckCompliantQuorum(ctx context.Context, id string, quorumThresholdCount uint32) (bool, error) {
	ret := _m.Called(ctx, id, quorumThresholdCount)

	if len(ret) == 0 {
		panic("no return value specified for CheckCompliantQuorum")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) (bool, error)); ok {
		return rf(ctx, id, quorumThresholdCount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) bool); ok {
		r0 = rf(ctx, id, quorumThresholdCount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32) error); ok {
		r1 = rf(ctx, id, quorumThresholdCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_CheckCompliantQuorum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckCompliantQuorum'
type TaskRepository_CheckCompliantQuorum_Call struct {
	*mock.Call
}

// CheckCompliantQuorum is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - quorumThresholdCount uint32
func (_e *TaskRepository_Expecter) CheckCompliantQuorum(ctx interface{}, id interface{}, quorumThresholdCount interface{}) *TaskRepository_CheckCompliantQuorum_Call {
	return &TaskRepository_CheckCompliantQuorum_Call{Call: _e.mock.On("CheckCompliantQuorum", ctx, id, quorumThresholdCount)}
}

func (_c *TaskRepository_CheckCompliantQuorum_Call) Run(run func(ctx context.Context, id string, quorumThresholdCount uint32)) *TaskRepository_CheckCompliantQuorum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32))
	})
	return _c
}

func (_c *TaskRepository_CheckCompliantQuorum_Call) Return(_a0 bool, _a1 error) *TaskRepository_CheckCompliantQuorum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_CheckCompliantQuorum_Call) RunAndReturn(run func(context.Context, string, uint32) (bool, error)) *TaskRepository_CheckCompliantQuorum_Call {
	_c.Call.Return(run)
	return _c
}

// CheckNonCompliantQuorum provides a mock function with given fields: ctx, id, quorumThresholdCount
func (_m *TaskRepository) CheckNonCompliantQuorum(ctx context.Context, id string, quorumThresholdCount uint32) (bool, error) {
	ret := _m.Called(ctx, id, quorumThresholdCount)

	if len(ret) == 0 {
		panic("no return value specified for CheckNonCompliantQuorum")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) (bool, error)); ok {
		return rf(ctx, id, quorumThresholdCount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint32) bool); ok {
		r0 = rf(ctx, id, quorumThresholdCount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint32) error); ok {
		r1 = rf(ctx, id, quorumThresholdCount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_CheckNonCompliantQuorum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckNonCompliantQuorum'
type TaskRepository_CheckNonCompliantQuorum_Call struct {
	*mock.Call
}

// CheckNonCompliantQuorum is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - quorumThresholdCount uint32
func (_e *TaskRepository_Expecter) CheckNonCompliantQuorum(ctx interface{}, id interface{}, quorumThresholdCount interface{}) *TaskRepository_CheckNonCompliantQuorum_Call {
	return &TaskRepository_CheckNonCompliantQuorum_Call{Call: _e.mock.On("CheckNonCompliantQuorum", ctx, id, quorumThresholdCount)}
}

func (_c *TaskRepository_CheckNonCompliantQuorum_Call) Run(run func(ctx context.Context, id string, quorumThresholdCount uint32)) *TaskRepository_CheckNonCompliantQuorum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint32))
	})
	return _c
}

func (_c *TaskRepository_CheckNonCompliantQuorum_Call) Return(_a0 bool, _a1 error) *TaskRepository_CheckNonCompliantQuorum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_CheckNonCompliantQuorum_Call) RunAndReturn(run func(context.Context, string, uint32) (bool, error)) *TaskRepository_CheckNonCompliantQuorum_Call {
	_c.Call.Return(run)
	return _c
}

// GetCompliantTaskResponses provides a mock function with given fields: ctx, id
func (_m *TaskRepository) GetCompliantTaskResponses(ctx context.Context, id string) ([]types.TaskResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetCompliantTaskResponses")
	}

	var r0 []types.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.TaskResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.TaskResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_GetCompliantTaskResponses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCompliantTaskResponses'
type TaskRepository_GetCompliantTaskResponses_Call struct {
	*mock.Call
}

// GetCompliantTaskResponses is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskRepository_Expecter) GetCompliantTaskResponses(ctx interface{}, id interface{}) *TaskRepository_GetCompliantTaskResponses_Call {
	return &TaskRepository_GetCompliantTaskResponses_Call{Call: _e.mock.On("GetCompliantTaskResponses", ctx, id)}
}

func (_c *TaskRepository_GetCompliantTaskResponses_Call) Run(run func(ctx context.Context, id string)) *TaskRepository_GetCompliantTaskResponses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_GetCompliantTaskResponses_Call) Return(_a0 []types.TaskResponse, _a1 error) *TaskRepository_GetCompliantTaskResponses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_GetCompliantTaskResponses_Call) RunAndReturn(run func(context.Context, string) ([]types.TaskResponse, error)) *TaskRepository_GetCompliantTaskResponses_Call {
	_c.Call.Return(run)
	return _c
}

// GetNonCompliantTaskResponses provides a mock function with given fields: ctx, id
func (_m *TaskRepository) GetNonCompliantTaskResponses(ctx context.Context, id string) ([]types.TaskResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetNonCompliantTaskResponses")
	}

	var r0 []types.TaskResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.TaskResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.TaskResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.TaskResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_GetNonCompliantTaskResponses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNonCompliantTaskResponses'
type TaskRepository_GetNonCompliantTaskResponses_Call struct {
	*mock.Call
}

// GetNonCompliantTaskResponses is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskRepository_Expecter) GetNonCompliantTaskResponses(ctx interface{}, id interface{}) *TaskRepository_GetNonCompliantTaskResponses_Call {
	return &TaskRepository_GetNonCompliantTaskResponses_Call{Call: _e.mock.On("GetNonCompliantTaskResponses", ctx, id)}
}

func (_c *TaskRepository_GetNonCompliantTaskResponses_Call) Run(run func(ctx context.Context, id string)) *TaskRepository_GetNonCompliantTaskResponses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_GetNonCompliantTaskResponses_Call) Return(_a0 []types.TaskResponse, _a1 error) *TaskRepository_GetNonCompliantTaskResponses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_GetNonCompliantTaskResponses_Call) RunAndReturn(run func(context.Context, string) ([]types.TaskResponse, error)) *TaskRepository_GetNonCompliantTaskResponses_Call {
	_c.Call.Return(run)
	return _c
}

// GetTask provides a mock function with given fields: ctx, id
func (_m *TaskRepository) GetTask(ctx context.Context, id string) (types.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 types.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.Task); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(types.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_GetTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTask'
type TaskRepository_GetTask_Call struct {
	*mock.Call
}

// GetTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskRepository_Expecter) GetTask(ctx interface{}, id interface{}) *TaskRepository_GetTask_Call {
	return &TaskRepository_GetTask_Call{Call: _e.mock.On("GetTask", ctx, id)}
}

func (_c *TaskRepository_GetTask_Call) Run(run func(ctx context.Context, id string)) *TaskRepository_GetTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_GetTask_Call) Return(_a0 types.Task, _a1 error) *TaskRepository_GetTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_GetTask_Call) RunAndReturn(run func(context.Context, string) (types.Task, error)) *TaskRepository_GetTask_Call {
	_c.Call.Return(run)
	return _c
}

// IsTaskExecuted provides a mock function with given fields: ctx, taskID
func (_m *TaskRepository) IsTaskExecuted(ctx context.Context, taskID string) (bool, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for IsTaskExecuted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_IsTaskExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTaskExecuted'
type TaskRepository_IsTaskExecuted_Call struct {
	*mock.Call
}

// IsTaskExecuted is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *TaskRepository_Expecter) IsTaskExecuted(ctx interface{}, taskID interface{}) *TaskRepository_IsTaskExecuted_Call {
	return &TaskRepository_IsTaskExecuted_Call{Call: _e.mock.On("IsTaskExecuted", ctx, taskID)}
}

func (_c *TaskRepository_IsTaskExecuted_Call) Run(run func(ctx context.Context, taskID string)) *TaskRepository_IsTaskExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_IsTaskExecuted_Call) Return(_a0 bool, _a1 error) *TaskRepository_IsTaskExecuted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_IsTaskExecuted_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *TaskRepository_IsTaskExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// LockTask provides a mock function with given fields: ctx, id
func (_m *TaskRepository) LockTask(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for LockTask")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskRepository_LockTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LockTask'
type TaskRepository_LockTask_Call struct {
	*mock.Call
}

// LockTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *TaskRepository_Expecter) LockTask(ctx interface{}, id interface{}) *TaskRepository_LockTask_Call {
	return &TaskRepository_LockTask_Call{Call: _e.mock.On("LockTask", ctx, id)}
}

func (_c *TaskRepository_LockTask_Call) Run(run func(ctx context.Context, id string)) *TaskRepository_LockTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_LockTask_Call) Return(_a0 string, _a1 error) *TaskRepository_LockTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskRepository_LockTask_Call) RunAndReturn(run func(context.Context, string) (string, error)) *TaskRepository_LockTask_Call {
	_c.Call.Return(run)
	return _c
}

// MarkTaskExecuted provides a mock function with given fields: ctx, taskID
func (_m *TaskRepository) MarkTaskExecuted(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for MarkTaskExecuted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_MarkTaskExecuted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkTaskExecuted'
type TaskRepository_MarkTaskExecuted_Call struct {
	*mock.Call
}

// MarkTaskExecuted is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *TaskRepository_Expecter) MarkTaskExecuted(ctx interface{}, taskID interface{}) *TaskRepository_MarkTaskExecuted_Call {
	return &TaskRepository_MarkTaskExecuted_Call{Call: _e.mock.On("MarkTaskExecuted", ctx, taskID)}
}

func (_c *TaskRepository_MarkTaskExecuted_Call) Run(run func(ctx context.Context, taskID string)) *TaskRepository_MarkTaskExecuted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TaskRepository_MarkTaskExecuted_Call) Return(_a0 error) *TaskRepository_MarkTaskExecuted_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_MarkTaskExecuted_Call) RunAndReturn(run func(context.Context, string) error) *TaskRepository_MarkTaskExecuted_Call {
	_c.Call.Return(run)
	return _c
}

// TestConnection provides a mock function with given fields: ctx
func (_m *TaskRepository) TestConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_TestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestConnection'
type TaskRepository_TestConnection_Call struct {
	*mock.Call
}

// TestConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TaskRepository_Expecter) TestConnection(ctx interface{}) *TaskRepository_TestConnection_Call {
	return &TaskRepository_TestConnection_Call{Call: _e.mock.On("TestConnection", ctx)}
}

func (_c *TaskRepository_TestConnection_Call) Run(run func(ctx context.Context)) *TaskRepository_TestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TaskRepository_TestConnection_Call) Return(_a0 error) *TaskRepository_TestConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_TestConnection_Call) RunAndReturn(run func(context.Context) error) *TaskRepository_TestConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UnlockTask provides a mock function with given fields: ctx, id, lockString
func (_m *TaskRepository) UnlockTask(ctx context.Context, id string, lockString string) error {
	ret := _m.Called(ctx, id, lockString)

	if len(ret) == 0 {
		panic("no return value specified for UnlockTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, lockString)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskRepository_UnlockTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnlockTask'
type TaskRepository_UnlockTask_Call struct {
	*mock.Call
}

// UnlockTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - lockString string
func (_e *TaskRepository_Expecter) UnlockTask(ctx interface{}, id interface{}, lockString interface{}) *TaskRepository_UnlockTask_Call {
	return &TaskRepository_UnlockTask_Call{Call: _e.mock.On("UnlockTask", ctx, id, lockString)}
}

func (_c *TaskRepository_UnlockTask_Call) Run(run func(ctx context.Context, id string, lockString string)) *TaskRepository_UnlockTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *TaskRepository_UnlockTask_Call) Return(_a0 error) *TaskRepository_UnlockTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskRepository_UnlockTask_Call) RunAndReturn(run func(context.Context, string, string) error) *TaskRepository_UnlockTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
