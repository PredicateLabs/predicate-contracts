// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ServiceManager "github.com/PredicateLabs/predicate-avs/gen/bindings/ServiceManager"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// ServiceManagerTransacts is an autogenerated mock type for the ServiceManagerTransacts type
type ServiceManagerTransacts struct {
	mock.Mock
}

type ServiceManagerTransacts_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceManagerTransacts) EXPECT() *ServiceManagerTransacts_Expecter {
	return &ServiceManagerTransacts_Expecter{mock: &_m.Mock}
}

// AddStrategy provides a mock function with given fields: opts, _strategy, quorumNumber, index
func (_m *ServiceManagerTransacts) AddStrategy(opts *bind.TransactOpts, _strategy common.Address, quorumNumber uint8, index *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, _strategy, quorumNumber, index)

	if len(ret) == 0 {
		panic("no return value specified for AddStrategy")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, uint8, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, _strategy, quorumNumber, index)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, uint8, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, _strategy, quorumNumber, index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, uint8, *big.Int) error); ok {
		r1 = rf(opts, _strategy, quorumNumber, index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_AddStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddStrategy'
type ServiceManagerTransacts_AddStrategy_Call struct {
	*mock.Call
}

// AddStrategy is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _strategy common.Address
//   - quorumNumber uint8
//   - index *big.Int
func (_e *ServiceManagerTransacts_Expecter) AddStrategy(opts interface{}, _strategy interface{}, quorumNumber interface{}, index interface{}) *ServiceManagerTransacts_AddStrategy_Call {
	return &ServiceManagerTransacts_AddStrategy_Call{Call: _e.mock.On("AddStrategy", opts, _strategy, quorumNumber, index)}
}

func (_c *ServiceManagerTransacts_AddStrategy_Call) Run(run func(opts *bind.TransactOpts, _strategy common.Address, quorumNumber uint8, index *big.Int)) *ServiceManagerTransacts_AddStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address), args[2].(uint8), args[3].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerTransacts_AddStrategy_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_AddStrategy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_AddStrategy_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address, uint8, *big.Int) (*types.Transaction, error)) *ServiceManagerTransacts_AddStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// DeployPolicy provides a mock function with given fields: opts, _policyID, _policy
func (_m *ServiceManagerTransacts) DeployPolicy(opts *bind.TransactOpts, _policyID string, _policy string) (*types.Transaction, error) {
	ret := _m.Called(opts, _policyID, _policy)

	if len(ret) == 0 {
		panic("no return value specified for DeployPolicy")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) (*types.Transaction, error)); ok {
		return rf(opts, _policyID, _policy)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, _policyID, _policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, _policyID, _policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_DeployPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployPolicy'
type ServiceManagerTransacts_DeployPolicy_Call struct {
	*mock.Call
}

// DeployPolicy is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _policyID string
//   - _policy string
func (_e *ServiceManagerTransacts_Expecter) DeployPolicy(opts interface{}, _policyID interface{}, _policy interface{}) *ServiceManagerTransacts_DeployPolicy_Call {
	return &ServiceManagerTransacts_DeployPolicy_Call{Call: _e.mock.On("DeployPolicy", opts, _policyID, _policy)}
}

func (_c *ServiceManagerTransacts_DeployPolicy_Call) Run(run func(opts *bind.TransactOpts, _policyID string, _policy string)) *ServiceManagerTransacts_DeployPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceManagerTransacts_DeployPolicy_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_DeployPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_DeployPolicy_Call) RunAndReturn(run func(*bind.TransactOpts, string, string) (*types.Transaction, error)) *ServiceManagerTransacts_DeployPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeploySocialGraph provides a mock function with given fields: opts, _socialGraphID, _socialGraphConfig
func (_m *ServiceManagerTransacts) DeploySocialGraph(opts *bind.TransactOpts, _socialGraphID string, _socialGraphConfig string) (*types.Transaction, error) {
	ret := _m.Called(opts, _socialGraphID, _socialGraphConfig)

	if len(ret) == 0 {
		panic("no return value specified for DeploySocialGraph")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) (*types.Transaction, error)); ok {
		return rf(opts, _socialGraphID, _socialGraphConfig)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string, string) *types.Transaction); ok {
		r0 = rf(opts, _socialGraphID, _socialGraphConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string, string) error); ok {
		r1 = rf(opts, _socialGraphID, _socialGraphConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_DeploySocialGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeploySocialGraph'
type ServiceManagerTransacts_DeploySocialGraph_Call struct {
	*mock.Call
}

// DeploySocialGraph is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _socialGraphID string
//   - _socialGraphConfig string
func (_e *ServiceManagerTransacts_Expecter) DeploySocialGraph(opts interface{}, _socialGraphID interface{}, _socialGraphConfig interface{}) *ServiceManagerTransacts_DeploySocialGraph_Call {
	return &ServiceManagerTransacts_DeploySocialGraph_Call{Call: _e.mock.On("DeploySocialGraph", opts, _socialGraphID, _socialGraphConfig)}
}

func (_c *ServiceManagerTransacts_DeploySocialGraph_Call) Run(run func(opts *bind.TransactOpts, _socialGraphID string, _socialGraphConfig string)) *ServiceManagerTransacts_DeploySocialGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceManagerTransacts_DeploySocialGraph_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_DeploySocialGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_DeploySocialGraph_Call) RunAndReturn(run func(*bind.TransactOpts, string, string) (*types.Transaction, error)) *ServiceManagerTransacts_DeploySocialGraph_Call {
	_c.Call.Return(run)
	return _c
}

// DeregisterOperatorFromAVS provides a mock function with given fields: opts, _operator
func (_m *ServiceManagerTransacts) DeregisterOperatorFromAVS(opts *bind.TransactOpts, _operator common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _operator)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterOperatorFromAVS")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _operator)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_DeregisterOperatorFromAVS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeregisterOperatorFromAVS'
type ServiceManagerTransacts_DeregisterOperatorFromAVS_Call struct {
	*mock.Call
}

// DeregisterOperatorFromAVS is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _operator common.Address
func (_e *ServiceManagerTransacts_Expecter) DeregisterOperatorFromAVS(opts interface{}, _operator interface{}) *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call {
	return &ServiceManagerTransacts_DeregisterOperatorFromAVS_Call{Call: _e.mock.On("DeregisterOperatorFromAVS", opts, _operator)}
}

func (_c *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call) Run(run func(opts *bind.TransactOpts, _operator common.Address)) *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_DeregisterOperatorFromAVS_Call {
	_c.Call.Return(run)
	return _c
}

// Initialize provides a mock function with given fields: opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake
func (_m *ServiceManagerTransacts) Initialize(opts *bind.TransactOpts, _owner common.Address, _aggregator common.Address, _delegationManager common.Address, _stakeRegistry common.Address, _avsDirectory common.Address, _thresholdStake *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, common.Address, common.Address, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, common.Address, common.Address, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address, common.Address, common.Address, common.Address, *big.Int) error); ok {
		r1 = rf(opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_Initialize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialize'
type ServiceManagerTransacts_Initialize_Call struct {
	*mock.Call
}

// Initialize is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _owner common.Address
//   - _aggregator common.Address
//   - _delegationManager common.Address
//   - _stakeRegistry common.Address
//   - _avsDirectory common.Address
//   - _thresholdStake *big.Int
func (_e *ServiceManagerTransacts_Expecter) Initialize(opts interface{}, _owner interface{}, _aggregator interface{}, _delegationManager interface{}, _stakeRegistry interface{}, _avsDirectory interface{}, _thresholdStake interface{}) *ServiceManagerTransacts_Initialize_Call {
	return &ServiceManagerTransacts_Initialize_Call{Call: _e.mock.On("Initialize", opts, _owner, _aggregator, _delegationManager, _stakeRegistry, _avsDirectory, _thresholdStake)}
}

func (_c *ServiceManagerTransacts_Initialize_Call) Run(run func(opts *bind.TransactOpts, _owner common.Address, _aggregator common.Address, _delegationManager common.Address, _stakeRegistry common.Address, _avsDirectory common.Address, _thresholdStake *big.Int)) *ServiceManagerTransacts_Initialize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address), args[2].(common.Address), args[3].(common.Address), args[4].(common.Address), args[5].(common.Address), args[6].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerTransacts_Initialize_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_Initialize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_Initialize_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address, common.Address, common.Address, common.Address, common.Address, *big.Int) (*types.Transaction, error)) *ServiceManagerTransacts_Initialize_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterOperatorToAVS provides a mock function with given fields: opts, _operatorSigningKey, _operatorSignature
func (_m *ServiceManagerTransacts) RegisterOperatorToAVS(opts *bind.TransactOpts, _operatorSigningKey common.Address, _operatorSignature ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error) {
	ret := _m.Called(opts, _operatorSigningKey, _operatorSignature)

	if len(ret) == 0 {
		panic("no return value specified for RegisterOperatorToAVS")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error)); ok {
		return rf(opts, _operatorSigningKey, _operatorSignature)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry) *types.Transaction); ok {
		r0 = rf(opts, _operatorSigningKey, _operatorSignature)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry) error); ok {
		r1 = rf(opts, _operatorSigningKey, _operatorSignature)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_RegisterOperatorToAVS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterOperatorToAVS'
type ServiceManagerTransacts_RegisterOperatorToAVS_Call struct {
	*mock.Call
}

// RegisterOperatorToAVS is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _operatorSigningKey common.Address
//   - _operatorSignature ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry
func (_e *ServiceManagerTransacts_Expecter) RegisterOperatorToAVS(opts interface{}, _operatorSigningKey interface{}, _operatorSignature interface{}) *ServiceManagerTransacts_RegisterOperatorToAVS_Call {
	return &ServiceManagerTransacts_RegisterOperatorToAVS_Call{Call: _e.mock.On("RegisterOperatorToAVS", opts, _operatorSigningKey, _operatorSignature)}
}

func (_c *ServiceManagerTransacts_RegisterOperatorToAVS_Call) Run(run func(opts *bind.TransactOpts, _operatorSigningKey common.Address, _operatorSignature ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry)) *ServiceManagerTransacts_RegisterOperatorToAVS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address), args[2].(ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry))
	})
	return _c
}

func (_c *ServiceManagerTransacts_RegisterOperatorToAVS_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_RegisterOperatorToAVS_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_RegisterOperatorToAVS_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address, ServiceManager.ISignatureUtilsSignatureWithSaltAndExpiry) (*types.Transaction, error)) *ServiceManagerTransacts_RegisterOperatorToAVS_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePolicy provides a mock function with given fields: opts, _policyID
func (_m *ServiceManagerTransacts) RemovePolicy(opts *bind.TransactOpts, _policyID string) (*types.Transaction, error) {
	ret := _m.Called(opts, _policyID)

	if len(ret) == 0 {
		panic("no return value specified for RemovePolicy")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(opts, _policyID)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(opts, _policyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string) error); ok {
		r1 = rf(opts, _policyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_RemovePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePolicy'
type ServiceManagerTransacts_RemovePolicy_Call struct {
	*mock.Call
}

// RemovePolicy is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _policyID string
func (_e *ServiceManagerTransacts_Expecter) RemovePolicy(opts interface{}, _policyID interface{}) *ServiceManagerTransacts_RemovePolicy_Call {
	return &ServiceManagerTransacts_RemovePolicy_Call{Call: _e.mock.On("RemovePolicy", opts, _policyID)}
}

func (_c *ServiceManagerTransacts_RemovePolicy_Call) Run(run func(opts *bind.TransactOpts, _policyID string)) *ServiceManagerTransacts_RemovePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerTransacts_RemovePolicy_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_RemovePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_RemovePolicy_Call) RunAndReturn(run func(*bind.TransactOpts, string) (*types.Transaction, error)) *ServiceManagerTransacts_RemovePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveStrategy provides a mock function with given fields: opts, _strategy
func (_m *ServiceManagerTransacts) RemoveStrategy(opts *bind.TransactOpts, _strategy common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _strategy)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStrategy")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _strategy)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _strategy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _strategy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_RemoveStrategy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveStrategy'
type ServiceManagerTransacts_RemoveStrategy_Call struct {
	*mock.Call
}

// RemoveStrategy is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _strategy common.Address
func (_e *ServiceManagerTransacts_Expecter) RemoveStrategy(opts interface{}, _strategy interface{}) *ServiceManagerTransacts_RemoveStrategy_Call {
	return &ServiceManagerTransacts_RemoveStrategy_Call{Call: _e.mock.On("RemoveStrategy", opts, _strategy)}
}

func (_c *ServiceManagerTransacts_RemoveStrategy_Call) Run(run func(opts *bind.TransactOpts, _strategy common.Address)) *ServiceManagerTransacts_RemoveStrategy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_RemoveStrategy_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_RemoveStrategy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_RemoveStrategy_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_RemoveStrategy_Call {
	_c.Call.Return(run)
	return _c
}

// RenounceOwnership provides a mock function with given fields: opts
func (_m *ServiceManagerTransacts) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for RenounceOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_RenounceOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenounceOwnership'
type ServiceManagerTransacts_RenounceOwnership_Call struct {
	*mock.Call
}

// RenounceOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *ServiceManagerTransacts_Expecter) RenounceOwnership(opts interface{}) *ServiceManagerTransacts_RenounceOwnership_Call {
	return &ServiceManagerTransacts_RenounceOwnership_Call{Call: _e.mock.On("RenounceOwnership", opts)}
}

func (_c *ServiceManagerTransacts_RenounceOwnership_Call) Run(run func(opts *bind.TransactOpts)) *ServiceManagerTransacts_RenounceOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *ServiceManagerTransacts_RenounceOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_RenounceOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_RenounceOwnership_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *ServiceManagerTransacts_RenounceOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// RotatePredicateSigningKey provides a mock function with given fields: opts, _oldSigningKey, _newSigningKey
func (_m *ServiceManagerTransacts) RotatePredicateSigningKey(opts *bind.TransactOpts, _oldSigningKey common.Address, _newSigningKey common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _oldSigningKey, _newSigningKey)

	if len(ret) == 0 {
		panic("no return value specified for RotatePredicateSigningKey")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _oldSigningKey, _newSigningKey)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _oldSigningKey, _newSigningKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, common.Address) error); ok {
		r1 = rf(opts, _oldSigningKey, _newSigningKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_RotatePredicateSigningKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RotatePredicateSigningKey'
type ServiceManagerTransacts_RotatePredicateSigningKey_Call struct {
	*mock.Call
}

// RotatePredicateSigningKey is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _oldSigningKey common.Address
//   - _newSigningKey common.Address
func (_e *ServiceManagerTransacts_Expecter) RotatePredicateSigningKey(opts interface{}, _oldSigningKey interface{}, _newSigningKey interface{}) *ServiceManagerTransacts_RotatePredicateSigningKey_Call {
	return &ServiceManagerTransacts_RotatePredicateSigningKey_Call{Call: _e.mock.On("RotatePredicateSigningKey", opts, _oldSigningKey, _newSigningKey)}
}

func (_c *ServiceManagerTransacts_RotatePredicateSigningKey_Call) Run(run func(opts *bind.TransactOpts, _oldSigningKey common.Address, _newSigningKey common.Address)) *ServiceManagerTransacts_RotatePredicateSigningKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address), args[2].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_RotatePredicateSigningKey_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_RotatePredicateSigningKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_RotatePredicateSigningKey_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_RotatePredicateSigningKey_Call {
	_c.Call.Return(run)
	return _c
}

// SetAVSDirectory provides a mock function with given fields: opts, _avsDirectory
func (_m *ServiceManagerTransacts) SetAVSDirectory(opts *bind.TransactOpts, _avsDirectory common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _avsDirectory)

	if len(ret) == 0 {
		panic("no return value specified for SetAVSDirectory")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _avsDirectory)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _avsDirectory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _avsDirectory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetAVSDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAVSDirectory'
type ServiceManagerTransacts_SetAVSDirectory_Call struct {
	*mock.Call
}

// SetAVSDirectory is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _avsDirectory common.Address
func (_e *ServiceManagerTransacts_Expecter) SetAVSDirectory(opts interface{}, _avsDirectory interface{}) *ServiceManagerTransacts_SetAVSDirectory_Call {
	return &ServiceManagerTransacts_SetAVSDirectory_Call{Call: _e.mock.On("SetAVSDirectory", opts, _avsDirectory)}
}

func (_c *ServiceManagerTransacts_SetAVSDirectory_Call) Run(run func(opts *bind.TransactOpts, _avsDirectory common.Address)) *ServiceManagerTransacts_SetAVSDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetAVSDirectory_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetAVSDirectory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetAVSDirectory_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_SetAVSDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// SetAggregator provides a mock function with given fields: opts, _aggregator
func (_m *ServiceManagerTransacts) SetAggregator(opts *bind.TransactOpts, _aggregator common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _aggregator)

	if len(ret) == 0 {
		panic("no return value specified for SetAggregator")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _aggregator)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _aggregator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _aggregator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetAggregator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAggregator'
type ServiceManagerTransacts_SetAggregator_Call struct {
	*mock.Call
}

// SetAggregator is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _aggregator common.Address
func (_e *ServiceManagerTransacts_Expecter) SetAggregator(opts interface{}, _aggregator interface{}) *ServiceManagerTransacts_SetAggregator_Call {
	return &ServiceManagerTransacts_SetAggregator_Call{Call: _e.mock.On("SetAggregator", opts, _aggregator)}
}

func (_c *ServiceManagerTransacts_SetAggregator_Call) Run(run func(opts *bind.TransactOpts, _aggregator common.Address)) *ServiceManagerTransacts_SetAggregator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetAggregator_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetAggregator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetAggregator_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_SetAggregator_Call {
	_c.Call.Return(run)
	return _c
}

// SetDelegationManager provides a mock function with given fields: opts, _delegationManager
func (_m *ServiceManagerTransacts) SetDelegationManager(opts *bind.TransactOpts, _delegationManager common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _delegationManager)

	if len(ret) == 0 {
		panic("no return value specified for SetDelegationManager")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _delegationManager)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _delegationManager)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _delegationManager)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetDelegationManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDelegationManager'
type ServiceManagerTransacts_SetDelegationManager_Call struct {
	*mock.Call
}

// SetDelegationManager is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _delegationManager common.Address
func (_e *ServiceManagerTransacts_Expecter) SetDelegationManager(opts interface{}, _delegationManager interface{}) *ServiceManagerTransacts_SetDelegationManager_Call {
	return &ServiceManagerTransacts_SetDelegationManager_Call{Call: _e.mock.On("SetDelegationManager", opts, _delegationManager)}
}

func (_c *ServiceManagerTransacts_SetDelegationManager_Call) Run(run func(opts *bind.TransactOpts, _delegationManager common.Address)) *ServiceManagerTransacts_SetDelegationManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetDelegationManager_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetDelegationManager_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetDelegationManager_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_SetDelegationManager_Call {
	_c.Call.Return(run)
	return _c
}

// SetMetadataURI provides a mock function with given fields: opts, _metadataURI
func (_m *ServiceManagerTransacts) SetMetadataURI(opts *bind.TransactOpts, _metadataURI string) (*types.Transaction, error) {
	ret := _m.Called(opts, _metadataURI)

	if len(ret) == 0 {
		panic("no return value specified for SetMetadataURI")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(opts, _metadataURI)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(opts, _metadataURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string) error); ok {
		r1 = rf(opts, _metadataURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetMetadataURI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMetadataURI'
type ServiceManagerTransacts_SetMetadataURI_Call struct {
	*mock.Call
}

// SetMetadataURI is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _metadataURI string
func (_e *ServiceManagerTransacts_Expecter) SetMetadataURI(opts interface{}, _metadataURI interface{}) *ServiceManagerTransacts_SetMetadataURI_Call {
	return &ServiceManagerTransacts_SetMetadataURI_Call{Call: _e.mock.On("SetMetadataURI", opts, _metadataURI)}
}

func (_c *ServiceManagerTransacts_SetMetadataURI_Call) Run(run func(opts *bind.TransactOpts, _metadataURI string)) *ServiceManagerTransacts_SetMetadataURI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetMetadataURI_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetMetadataURI_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetMetadataURI_Call) RunAndReturn(run func(*bind.TransactOpts, string) (*types.Transaction, error)) *ServiceManagerTransacts_SetMetadataURI_Call {
	_c.Call.Return(run)
	return _c
}

// SetPolicy provides a mock function with given fields: opts, _policyID
func (_m *ServiceManagerTransacts) SetPolicy(opts *bind.TransactOpts, _policyID string) (*types.Transaction, error) {
	ret := _m.Called(opts, _policyID)

	if len(ret) == 0 {
		panic("no return value specified for SetPolicy")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) (*types.Transaction, error)); ok {
		return rf(opts, _policyID)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, string) *types.Transaction); ok {
		r0 = rf(opts, _policyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, string) error); ok {
		r1 = rf(opts, _policyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPolicy'
type ServiceManagerTransacts_SetPolicy_Call struct {
	*mock.Call
}

// SetPolicy is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _policyID string
func (_e *ServiceManagerTransacts_Expecter) SetPolicy(opts interface{}, _policyID interface{}) *ServiceManagerTransacts_SetPolicy_Call {
	return &ServiceManagerTransacts_SetPolicy_Call{Call: _e.mock.On("SetPolicy", opts, _policyID)}
}

func (_c *ServiceManagerTransacts_SetPolicy_Call) Run(run func(opts *bind.TransactOpts, _policyID string)) *ServiceManagerTransacts_SetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetPolicy_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetPolicy_Call) RunAndReturn(run func(*bind.TransactOpts, string) (*types.Transaction, error)) *ServiceManagerTransacts_SetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// SetStakeRegistry provides a mock function with given fields: opts, _stakeRegistry
func (_m *ServiceManagerTransacts) SetStakeRegistry(opts *bind.TransactOpts, _stakeRegistry common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _stakeRegistry)

	if len(ret) == 0 {
		panic("no return value specified for SetStakeRegistry")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _stakeRegistry)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _stakeRegistry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _stakeRegistry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetStakeRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStakeRegistry'
type ServiceManagerTransacts_SetStakeRegistry_Call struct {
	*mock.Call
}

// SetStakeRegistry is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _stakeRegistry common.Address
func (_e *ServiceManagerTransacts_Expecter) SetStakeRegistry(opts interface{}, _stakeRegistry interface{}) *ServiceManagerTransacts_SetStakeRegistry_Call {
	return &ServiceManagerTransacts_SetStakeRegistry_Call{Call: _e.mock.On("SetStakeRegistry", opts, _stakeRegistry)}
}

func (_c *ServiceManagerTransacts_SetStakeRegistry_Call) Run(run func(opts *bind.TransactOpts, _stakeRegistry common.Address)) *ServiceManagerTransacts_SetStakeRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetStakeRegistry_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetStakeRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetStakeRegistry_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_SetStakeRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// SetThresholdStake provides a mock function with given fields: opts, _thresholdStake
func (_m *ServiceManagerTransacts) SetThresholdStake(opts *bind.TransactOpts, _thresholdStake *big.Int) (*types.Transaction, error) {
	ret := _m.Called(opts, _thresholdStake)

	if len(ret) == 0 {
		panic("no return value specified for SetThresholdStake")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)); ok {
		return rf(opts, _thresholdStake)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, *big.Int) *types.Transaction); ok {
		r0 = rf(opts, _thresholdStake)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, *big.Int) error); ok {
		r1 = rf(opts, _thresholdStake)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_SetThresholdStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetThresholdStake'
type ServiceManagerTransacts_SetThresholdStake_Call struct {
	*mock.Call
}

// SetThresholdStake is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _thresholdStake *big.Int
func (_e *ServiceManagerTransacts_Expecter) SetThresholdStake(opts interface{}, _thresholdStake interface{}) *ServiceManagerTransacts_SetThresholdStake_Call {
	return &ServiceManagerTransacts_SetThresholdStake_Call{Call: _e.mock.On("SetThresholdStake", opts, _thresholdStake)}
}

func (_c *ServiceManagerTransacts_SetThresholdStake_Call) Run(run func(opts *bind.TransactOpts, _thresholdStake *big.Int)) *ServiceManagerTransacts_SetThresholdStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerTransacts_SetThresholdStake_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_SetThresholdStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_SetThresholdStake_Call) RunAndReturn(run func(*bind.TransactOpts, *big.Int) (*types.Transaction, error)) *ServiceManagerTransacts_SetThresholdStake_Call {
	_c.Call.Return(run)
	return _c
}

// TransferOwnership provides a mock function with given fields: opts, newOwner
func (_m *ServiceManagerTransacts) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, newOwner)

	if len(ret) == 0 {
		panic("no return value specified for TransferOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, newOwner)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, newOwner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, newOwner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_TransferOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferOwnership'
type ServiceManagerTransacts_TransferOwnership_Call struct {
	*mock.Call
}

// TransferOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - newOwner common.Address
func (_e *ServiceManagerTransacts_Expecter) TransferOwnership(opts interface{}, newOwner interface{}) *ServiceManagerTransacts_TransferOwnership_Call {
	return &ServiceManagerTransacts_TransferOwnership_Call{Call: _e.mock.On("TransferOwnership", opts, newOwner)}
}

func (_c *ServiceManagerTransacts_TransferOwnership_Call) Run(run func(opts *bind.TransactOpts, newOwner common.Address)) *ServiceManagerTransacts_TransferOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerTransacts_TransferOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_TransferOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_TransferOwnership_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *ServiceManagerTransacts_TransferOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOperatorsForQuorum provides a mock function with given fields: opts, operatorsPerQuorum, quorumNumbers
func (_m *ServiceManagerTransacts) UpdateOperatorsForQuorum(opts *bind.TransactOpts, operatorsPerQuorum [][]common.Address, quorumNumbers []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, operatorsPerQuorum, quorumNumbers)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOperatorsForQuorum")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]common.Address, []byte) (*types.Transaction, error)); ok {
		return rf(opts, operatorsPerQuorum, quorumNumbers)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]common.Address, []byte) *types.Transaction); ok {
		r0 = rf(opts, operatorsPerQuorum, quorumNumbers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [][]common.Address, []byte) error); ok {
		r1 = rf(opts, operatorsPerQuorum, quorumNumbers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_UpdateOperatorsForQuorum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOperatorsForQuorum'
type ServiceManagerTransacts_UpdateOperatorsForQuorum_Call struct {
	*mock.Call
}

// UpdateOperatorsForQuorum is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - operatorsPerQuorum [][]common.Address
//   - quorumNumbers []byte
func (_e *ServiceManagerTransacts_Expecter) UpdateOperatorsForQuorum(opts interface{}, operatorsPerQuorum interface{}, quorumNumbers interface{}) *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call {
	return &ServiceManagerTransacts_UpdateOperatorsForQuorum_Call{Call: _e.mock.On("UpdateOperatorsForQuorum", opts, operatorsPerQuorum, quorumNumbers)}
}

func (_c *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call) Run(run func(opts *bind.TransactOpts, operatorsPerQuorum [][]common.Address, quorumNumbers []byte)) *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([][]common.Address), args[2].([]byte))
	})
	return _c
}

func (_c *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call) RunAndReturn(run func(*bind.TransactOpts, [][]common.Address, []byte) (*types.Transaction, error)) *ServiceManagerTransacts_UpdateOperatorsForQuorum_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateSignatures provides a mock function with given fields: opts, _task, signerAddresses, signatures
func (_m *ServiceManagerTransacts) ValidateSignatures(opts *bind.TransactOpts, _task ServiceManager.Task, signerAddresses []common.Address, signatures [][]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _task, signerAddresses, signatures)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSignatures")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, ServiceManager.Task, []common.Address, [][]byte) (*types.Transaction, error)); ok {
		return rf(opts, _task, signerAddresses, signatures)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, ServiceManager.Task, []common.Address, [][]byte) *types.Transaction); ok {
		r0 = rf(opts, _task, signerAddresses, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, ServiceManager.Task, []common.Address, [][]byte) error); ok {
		r1 = rf(opts, _task, signerAddresses, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerTransacts_ValidateSignatures_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSignatures'
type ServiceManagerTransacts_ValidateSignatures_Call struct {
	*mock.Call
}

// ValidateSignatures is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _task ServiceManager.Task
//   - signerAddresses []common.Address
//   - signatures [][]byte
func (_e *ServiceManagerTransacts_Expecter) ValidateSignatures(opts interface{}, _task interface{}, signerAddresses interface{}, signatures interface{}) *ServiceManagerTransacts_ValidateSignatures_Call {
	return &ServiceManagerTransacts_ValidateSignatures_Call{Call: _e.mock.On("ValidateSignatures", opts, _task, signerAddresses, signatures)}
}

func (_c *ServiceManagerTransacts_ValidateSignatures_Call) Run(run func(opts *bind.TransactOpts, _task ServiceManager.Task, signerAddresses []common.Address, signatures [][]byte)) *ServiceManagerTransacts_ValidateSignatures_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(ServiceManager.Task), args[2].([]common.Address), args[3].([][]byte))
	})
	return _c
}

func (_c *ServiceManagerTransacts_ValidateSignatures_Call) Return(_a0 *types.Transaction, _a1 error) *ServiceManagerTransacts_ValidateSignatures_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerTransacts_ValidateSignatures_Call) RunAndReturn(run func(*bind.TransactOpts, ServiceManager.Task, []common.Address, [][]byte) (*types.Transaction, error)) *ServiceManagerTransacts_ValidateSignatures_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceManagerTransacts creates a new instance of ServiceManagerTransacts. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceManagerTransacts(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceManagerTransacts {
	mock := &ServiceManagerTransacts{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
