// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	policy "github.com/PredicateLabs/predicate-avs/core/policy"
	mock "github.com/stretchr/testify/mock"

	predicatestypes "github.com/PredicateLabs/predicate-avs/core/predicates/types"

	socialgraph "github.com/PredicateLabs/predicate-avs/core/socialgraph"

	types "github.com/PredicateLabs/predicate-avs/core/types"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// Enforce provides a mock function with given fields: _a0, _a1, _a2
func (_m *Controller) Enforce(_a0 policy.Policy, _a1 types.Task, _a2 *predicatestypes.ExecutionEnv) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Enforce")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(policy.Policy, types.Task, *predicatestypes.ExecutionEnv) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(policy.Policy, types.Task, *predicatestypes.ExecutionEnv) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(policy.Policy, types.Task, *predicatestypes.ExecutionEnv) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_Enforce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Enforce'
type Controller_Enforce_Call struct {
	*mock.Call
}

// Enforce is a helper method to define mock.On call
//   - _a0 policy.Policy
//   - _a1 types.Task
//   - _a2 *predicatestypes.ExecutionEnv
func (_e *Controller_Expecter) Enforce(_a0 interface{}, _a1 interface{}, _a2 interface{}) *Controller_Enforce_Call {
	return &Controller_Enforce_Call{Call: _e.mock.On("Enforce", _a0, _a1, _a2)}
}

func (_c *Controller_Enforce_Call) Run(run func(_a0 policy.Policy, _a1 types.Task, _a2 *predicatestypes.ExecutionEnv)) *Controller_Enforce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(policy.Policy), args[1].(types.Task), args[2].(*predicatestypes.ExecutionEnv))
	})
	return _c
}

func (_c *Controller_Enforce_Call) Return(_a0 bool, _a1 error) *Controller_Enforce_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_Enforce_Call) RunAndReturn(run func(policy.Policy, types.Task, *predicatestypes.ExecutionEnv) (bool, error)) *Controller_Enforce_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: _a0, _a1
func (_m *Controller) GetPolicy(_a0 context.Context, _a1 string) (policy.Policy, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 policy.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (policy.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) policy.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(policy.Policy)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type Controller_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Controller_Expecter) GetPolicy(_a0 interface{}, _a1 interface{}) *Controller_GetPolicy_Call {
	return &Controller_GetPolicy_Call{Call: _e.mock.On("GetPolicy", _a0, _a1)}
}

func (_c *Controller_GetPolicy_Call) Run(run func(_a0 context.Context, _a1 string)) *Controller_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Controller_GetPolicy_Call) Return(_a0 policy.Policy, _a1 error) *Controller_GetPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_GetPolicy_Call) RunAndReturn(run func(context.Context, string) (policy.Policy, error)) *Controller_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyFromChain provides a mock function with given fields: _a0, _a1
func (_m *Controller) GetPolicyFromChain(_a0 context.Context, _a1 string) (*policy.Policy, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyFromChain")
	}

	var r0 *policy.Policy
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*policy.Policy, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *policy.Policy); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*policy.Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_GetPolicyFromChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyFromChain'
type Controller_GetPolicyFromChain_Call struct {
	*mock.Call
}

// GetPolicyFromChain is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Controller_Expecter) GetPolicyFromChain(_a0 interface{}, _a1 interface{}) *Controller_GetPolicyFromChain_Call {
	return &Controller_GetPolicyFromChain_Call{Call: _e.mock.On("GetPolicyFromChain", _a0, _a1)}
}

func (_c *Controller_GetPolicyFromChain_Call) Run(run func(_a0 context.Context, _a1 string)) *Controller_GetPolicyFromChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Controller_GetPolicyFromChain_Call) Return(_a0 *policy.Policy, _a1 error) *Controller_GetPolicyFromChain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_GetPolicyFromChain_Call) RunAndReturn(run func(context.Context, string) (*policy.Policy, error)) *Controller_GetPolicyFromChain_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialGraph provides a mock function with given fields: _a0, _a1
func (_m *Controller) GetSocialGraph(_a0 context.Context, _a1 string) (socialgraph.SocialGraphConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialGraph")
	}

	var r0 socialgraph.SocialGraphConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (socialgraph.SocialGraphConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) socialgraph.SocialGraphConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(socialgraph.SocialGraphConfig)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_GetSocialGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialGraph'
type Controller_GetSocialGraph_Call struct {
	*mock.Call
}

// GetSocialGraph is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Controller_Expecter) GetSocialGraph(_a0 interface{}, _a1 interface{}) *Controller_GetSocialGraph_Call {
	return &Controller_GetSocialGraph_Call{Call: _e.mock.On("GetSocialGraph", _a0, _a1)}
}

func (_c *Controller_GetSocialGraph_Call) Run(run func(_a0 context.Context, _a1 string)) *Controller_GetSocialGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Controller_GetSocialGraph_Call) Return(_a0 socialgraph.SocialGraphConfig, _a1 error) *Controller_GetSocialGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_GetSocialGraph_Call) RunAndReturn(run func(context.Context, string) (socialgraph.SocialGraphConfig, error)) *Controller_GetSocialGraph_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialGraphFromChain provides a mock function with given fields: _a0, _a1
func (_m *Controller) GetSocialGraphFromChain(_a0 context.Context, _a1 string) (*socialgraph.SocialGraphConfig, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialGraphFromChain")
	}

	var r0 *socialgraph.SocialGraphConfig
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*socialgraph.SocialGraphConfig, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *socialgraph.SocialGraphConfig); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*socialgraph.SocialGraphConfig)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_GetSocialGraphFromChain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialGraphFromChain'
type Controller_GetSocialGraphFromChain_Call struct {
	*mock.Call
}

// GetSocialGraphFromChain is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Controller_Expecter) GetSocialGraphFromChain(_a0 interface{}, _a1 interface{}) *Controller_GetSocialGraphFromChain_Call {
	return &Controller_GetSocialGraphFromChain_Call{Call: _e.mock.On("GetSocialGraphFromChain", _a0, _a1)}
}

func (_c *Controller_GetSocialGraphFromChain_Call) Run(run func(_a0 context.Context, _a1 string)) *Controller_GetSocialGraphFromChain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Controller_GetSocialGraphFromChain_Call) Return(_a0 *socialgraph.SocialGraphConfig, _a1 error) *Controller_GetSocialGraphFromChain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_GetSocialGraphFromChain_Call) RunAndReturn(run func(context.Context, string) (*socialgraph.SocialGraphConfig, error)) *Controller_GetSocialGraphFromChain_Call {
	_c.Call.Return(run)
	return _c
}

// IsPolicyValid provides a mock function with given fields: _a0, _a1
func (_m *Controller) IsPolicyValid(_a0 context.Context, _a1 string) (bool, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsPolicyValid")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Controller_IsPolicyValid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPolicyValid'
type Controller_IsPolicyValid_Call struct {
	*mock.Call
}

// IsPolicyValid is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *Controller_Expecter) IsPolicyValid(_a0 interface{}, _a1 interface{}) *Controller_IsPolicyValid_Call {
	return &Controller_IsPolicyValid_Call{Call: _e.mock.On("IsPolicyValid", _a0, _a1)}
}

func (_c *Controller_IsPolicyValid_Call) Run(run func(_a0 context.Context, _a1 string)) *Controller_IsPolicyValid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Controller_IsPolicyValid_Call) Return(_a0 bool, _a1 error) *Controller_IsPolicyValid_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controller_IsPolicyValid_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *Controller_IsPolicyValid_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
