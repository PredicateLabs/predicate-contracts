// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	log "github.com/PredicateLabs/predicate-avs/common/log"
	mock "github.com/stretchr/testify/mock"
)

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Debug provides a mock function with given fields: msg, keyVals
func (_m *Logger) Debug(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Logger_Debug_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Debug'
type Logger_Debug_Call struct {
	*mock.Call
}

// Debug is a helper method to define mock.On call
//   - msg string
//   - keyVals ...interface{}
func (_e *Logger_Expecter) Debug(msg interface{}, keyVals ...interface{}) *Logger_Debug_Call {
	return &Logger_Debug_Call{Call: _e.mock.On("Debug",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Debug_Call) Run(run func(msg string, keyVals ...interface{})) *Logger_Debug_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Debug_Call) Return() *Logger_Debug_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Debug_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Debug_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function with given fields: msg, keyVals
func (_m *Logger) Error(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Logger_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Logger_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
//   - msg string
//   - keyVals ...interface{}
func (_e *Logger_Expecter) Error(msg interface{}, keyVals ...interface{}) *Logger_Error_Call {
	return &Logger_Error_Call{Call: _e.mock.On("Error",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Error_Call) Run(run func(msg string, keyVals ...interface{})) *Logger_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Error_Call) Return() *Logger_Error_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Error_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Error_Call {
	_c.Call.Return(run)
	return _c
}

// Impl provides a mock function with given fields:
func (_m *Logger) Impl() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Impl")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Logger_Impl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Impl'
type Logger_Impl_Call struct {
	*mock.Call
}

// Impl is a helper method to define mock.On call
func (_e *Logger_Expecter) Impl() *Logger_Impl_Call {
	return &Logger_Impl_Call{Call: _e.mock.On("Impl")}
}

func (_c *Logger_Impl_Call) Run(run func()) *Logger_Impl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Logger_Impl_Call) Return(_a0 interface{}) *Logger_Impl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_Impl_Call) RunAndReturn(run func() interface{}) *Logger_Impl_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: msg, keyVals
func (_m *Logger) Info(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Logger_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type Logger_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - msg string
//   - keyVals ...interface{}
func (_e *Logger_Expecter) Info(msg interface{}, keyVals ...interface{}) *Logger_Info_Call {
	return &Logger_Info_Call{Call: _e.mock.On("Info",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Info_Call) Run(run func(msg string, keyVals ...interface{})) *Logger_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Info_Call) Return() *Logger_Info_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Info_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Info_Call {
	_c.Call.Return(run)
	return _c
}

// Warn provides a mock function with given fields: msg, keyVals
func (_m *Logger) Warn(msg string, keyVals ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, msg)
	_ca = append(_ca, keyVals...)
	_m.Called(_ca...)
}

// Logger_Warn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Warn'
type Logger_Warn_Call struct {
	*mock.Call
}

// Warn is a helper method to define mock.On call
//   - msg string
//   - keyVals ...interface{}
func (_e *Logger_Expecter) Warn(msg interface{}, keyVals ...interface{}) *Logger_Warn_Call {
	return &Logger_Warn_Call{Call: _e.mock.On("Warn",
		append([]interface{}{msg}, keyVals...)...)}
}

func (_c *Logger_Warn_Call) Run(run func(msg string, keyVals ...interface{})) *Logger_Warn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Logger_Warn_Call) Return() *Logger_Warn_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Warn_Call) RunAndReturn(run func(string, ...interface{})) *Logger_Warn_Call {
	_c.Call.Return(run)
	return _c
}

// With provides a mock function with given fields: keyVals
func (_m *Logger) With(keyVals ...interface{}) log.Logger {
	var _ca []interface{}
	_ca = append(_ca, keyVals...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 log.Logger
	if rf, ok := ret.Get(0).(func(...interface{}) log.Logger); ok {
		r0 = rf(keyVals...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.Logger)
		}
	}

	return r0
}

// Logger_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type Logger_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - keyVals ...interface{}
func (_e *Logger_Expecter) With(keyVals ...interface{}) *Logger_With_Call {
	return &Logger_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, keyVals...)...)}
}

func (_c *Logger_With_Call) Run(run func(keyVals ...interface{})) *Logger_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Logger_With_Call) Return(_a0 log.Logger) *Logger_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Logger_With_Call) RunAndReturn(run func(...interface{}) log.Logger) *Logger_With_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
