// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// IAVSDirectoryCalls is an autogenerated mock type for the IAVSDirectoryCalls type
type IAVSDirectoryCalls struct {
	mock.Mock
}

type IAVSDirectoryCalls_Expecter struct {
	mock *mock.Mock
}

func (_m *IAVSDirectoryCalls) EXPECT() *IAVSDirectoryCalls_Expecter {
	return &IAVSDirectoryCalls_Expecter{mock: &_m.Mock}
}

// CalculateOperatorAVSRegistrationDigestHash provides a mock function with given fields: opts, operator, avs, salt, expiry
func (_m *IAVSDirectoryCalls) CalculateOperatorAVSRegistrationDigestHash(opts *bind.CallOpts, operator common.Address, avs common.Address, salt [32]byte, expiry *big.Int) ([32]byte, error) {
	ret := _m.Called(opts, operator, avs, salt, expiry)

	if len(ret) == 0 {
		panic("no return value specified for CalculateOperatorAVSRegistrationDigestHash")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, common.Address, [32]byte, *big.Int) ([32]byte, error)); ok {
		return rf(opts, operator, avs, salt, expiry)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, common.Address, [32]byte, *big.Int) [32]byte); ok {
		r0 = rf(opts, operator, avs, salt, expiry)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, common.Address, [32]byte, *big.Int) error); ok {
		r1 = rf(opts, operator, avs, salt, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateOperatorAVSRegistrationDigestHash'
type IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call struct {
	*mock.Call
}

// CalculateOperatorAVSRegistrationDigestHash is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - operator common.Address
//   - avs common.Address
//   - salt [32]byte
//   - expiry *big.Int
func (_e *IAVSDirectoryCalls_Expecter) CalculateOperatorAVSRegistrationDigestHash(opts interface{}, operator interface{}, avs interface{}, salt interface{}, expiry interface{}) *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call {
	return &IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call{Call: _e.mock.On("CalculateOperatorAVSRegistrationDigestHash", opts, operator, avs, salt, expiry)}
}

func (_c *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call) Run(run func(opts *bind.CallOpts, operator common.Address, avs common.Address, salt [32]byte, expiry *big.Int)) *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].(common.Address), args[3].([32]byte), args[4].(*big.Int))
	})
	return _c
}

func (_c *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call) Return(_a0 [32]byte, _a1 error) *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, common.Address, [32]byte, *big.Int) ([32]byte, error)) *IAVSDirectoryCalls_CalculateOperatorAVSRegistrationDigestHash_Call {
	_c.Call.Return(run)
	return _c
}

// OPERATORAVSREGISTRATIONTYPEHASH provides a mock function with given fields: opts
func (_m *IAVSDirectoryCalls) OPERATORAVSREGISTRATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for OPERATORAVSREGISTRATIONTYPEHASH")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([32]byte, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) [32]byte); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OPERATORAVSREGISTRATIONTYPEHASH'
type IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call struct {
	*mock.Call
}

// OPERATORAVSREGISTRATIONTYPEHASH is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *IAVSDirectoryCalls_Expecter) OPERATORAVSREGISTRATIONTYPEHASH(opts interface{}) *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call {
	return &IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call{Call: _e.mock.On("OPERATORAVSREGISTRATIONTYPEHASH", opts)}
}

func (_c *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call) Run(run func(opts *bind.CallOpts)) *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call) Return(_a0 [32]byte, _a1 error) *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call) RunAndReturn(run func(*bind.CallOpts) ([32]byte, error)) *IAVSDirectoryCalls_OPERATORAVSREGISTRATIONTYPEHASH_Call {
	_c.Call.Return(run)
	return _c
}

// OperatorSaltIsSpent provides a mock function with given fields: opts, operator, salt
func (_m *IAVSDirectoryCalls) OperatorSaltIsSpent(opts *bind.CallOpts, operator common.Address, salt [32]byte) (bool, error) {
	ret := _m.Called(opts, operator, salt)

	if len(ret) == 0 {
		panic("no return value specified for OperatorSaltIsSpent")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte) (bool, error)); ok {
		return rf(opts, operator, salt)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte) bool); ok {
		r0 = rf(opts, operator, salt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, [32]byte) error); ok {
		r1 = rf(opts, operator, salt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAVSDirectoryCalls_OperatorSaltIsSpent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OperatorSaltIsSpent'
type IAVSDirectoryCalls_OperatorSaltIsSpent_Call struct {
	*mock.Call
}

// OperatorSaltIsSpent is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - operator common.Address
//   - salt [32]byte
func (_e *IAVSDirectoryCalls_Expecter) OperatorSaltIsSpent(opts interface{}, operator interface{}, salt interface{}) *IAVSDirectoryCalls_OperatorSaltIsSpent_Call {
	return &IAVSDirectoryCalls_OperatorSaltIsSpent_Call{Call: _e.mock.On("OperatorSaltIsSpent", opts, operator, salt)}
}

func (_c *IAVSDirectoryCalls_OperatorSaltIsSpent_Call) Run(run func(opts *bind.CallOpts, operator common.Address, salt [32]byte)) *IAVSDirectoryCalls_OperatorSaltIsSpent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].([32]byte))
	})
	return _c
}

func (_c *IAVSDirectoryCalls_OperatorSaltIsSpent_Call) Return(_a0 bool, _a1 error) *IAVSDirectoryCalls_OperatorSaltIsSpent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAVSDirectoryCalls_OperatorSaltIsSpent_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, [32]byte) (bool, error)) *IAVSDirectoryCalls_OperatorSaltIsSpent_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAVSDirectoryCalls creates a new instance of IAVSDirectoryCalls. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAVSDirectoryCalls(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAVSDirectoryCalls {
	mock := &IAVSDirectoryCalls{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
