// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	types "github.com/ethereum/go-ethereum/core/types"
	mock "github.com/stretchr/testify/mock"
)

// EthHeaderTraversal is an autogenerated mock type for the EthHeaderTraversal type
type EthHeaderTraversal struct {
	mock.Mock
}

type EthHeaderTraversal_Expecter struct {
	mock *mock.Mock
}

func (_m *EthHeaderTraversal) EXPECT() *EthHeaderTraversal_Expecter {
	return &EthHeaderTraversal_Expecter{mock: &_m.Mock}
}

// LastTraversedHeader provides a mock function with given fields:
func (_m *EthHeaderTraversal) LastTraversedHeader() *types.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastTraversedHeader")
	}

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func() *types.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	return r0
}

// EthHeaderTraversal_LastTraversedHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastTraversedHeader'
type EthHeaderTraversal_LastTraversedHeader_Call struct {
	*mock.Call
}

// LastTraversedHeader is a helper method to define mock.On call
func (_e *EthHeaderTraversal_Expecter) LastTraversedHeader() *EthHeaderTraversal_LastTraversedHeader_Call {
	return &EthHeaderTraversal_LastTraversedHeader_Call{Call: _e.mock.On("LastTraversedHeader")}
}

func (_c *EthHeaderTraversal_LastTraversedHeader_Call) Run(run func()) *EthHeaderTraversal_LastTraversedHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EthHeaderTraversal_LastTraversedHeader_Call) Return(_a0 *types.Header) *EthHeaderTraversal_LastTraversedHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthHeaderTraversal_LastTraversedHeader_Call) RunAndReturn(run func() *types.Header) *EthHeaderTraversal_LastTraversedHeader_Call {
	_c.Call.Return(run)
	return _c
}

// LatestHeader provides a mock function with given fields:
func (_m *EthHeaderTraversal) LatestHeader() *types.Header {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LatestHeader")
	}

	var r0 *types.Header
	if rf, ok := ret.Get(0).(func() *types.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Header)
		}
	}

	return r0
}

// EthHeaderTraversal_LatestHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestHeader'
type EthHeaderTraversal_LatestHeader_Call struct {
	*mock.Call
}

// LatestHeader is a helper method to define mock.On call
func (_e *EthHeaderTraversal_Expecter) LatestHeader() *EthHeaderTraversal_LatestHeader_Call {
	return &EthHeaderTraversal_LatestHeader_Call{Call: _e.mock.On("LatestHeader")}
}

func (_c *EthHeaderTraversal_LatestHeader_Call) Run(run func()) *EthHeaderTraversal_LatestHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EthHeaderTraversal_LatestHeader_Call) Return(_a0 *types.Header) *EthHeaderTraversal_LatestHeader_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EthHeaderTraversal_LatestHeader_Call) RunAndReturn(run func() *types.Header) *EthHeaderTraversal_LatestHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NextHeaders provides a mock function with given fields: maxSize
func (_m *EthHeaderTraversal) NextHeaders(maxSize uint64) ([]types.Header, error) {
	ret := _m.Called(maxSize)

	if len(ret) == 0 {
		panic("no return value specified for NextHeaders")
	}

	var r0 []types.Header
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]types.Header, error)); ok {
		return rf(maxSize)
	}
	if rf, ok := ret.Get(0).(func(uint64) []types.Header); ok {
		r0 = rf(maxSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Header)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(maxSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EthHeaderTraversal_NextHeaders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NextHeaders'
type EthHeaderTraversal_NextHeaders_Call struct {
	*mock.Call
}

// NextHeaders is a helper method to define mock.On call
//   - maxSize uint64
func (_e *EthHeaderTraversal_Expecter) NextHeaders(maxSize interface{}) *EthHeaderTraversal_NextHeaders_Call {
	return &EthHeaderTraversal_NextHeaders_Call{Call: _e.mock.On("NextHeaders", maxSize)}
}

func (_c *EthHeaderTraversal_NextHeaders_Call) Run(run func(maxSize uint64)) *EthHeaderTraversal_NextHeaders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *EthHeaderTraversal_NextHeaders_Call) Return(_a0 []types.Header, _a1 error) *EthHeaderTraversal_NextHeaders_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EthHeaderTraversal_NextHeaders_Call) RunAndReturn(run func(uint64) ([]types.Header, error)) *EthHeaderTraversal_NextHeaders_Call {
	_c.Call.Return(run)
	return _c
}

// NewEthHeaderTraversal creates a new instance of EthHeaderTraversal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEthHeaderTraversal(t interface {
	mock.TestingT
	Cleanup(func())
}) *EthHeaderTraversal {
	mock := &EthHeaderTraversal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
