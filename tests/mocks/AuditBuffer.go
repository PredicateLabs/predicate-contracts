// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/PredicateLabs/predicate-avs/operator/indexer/types"
)

// AuditBuffer is an autogenerated mock type for the AuditBuffer type
type AuditBuffer struct {
	mock.Mock
}

type AuditBuffer_Expecter struct {
	mock *mock.Mock
}

func (_m *AuditBuffer) EXPECT() *AuditBuffer_Expecter {
	return &AuditBuffer_Expecter{mock: &_m.Mock}
}

// BlockAtHeightExists provides a mock function with given fields: height
func (_m *AuditBuffer) BlockAtHeightExists(height uint64) bool {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for BlockAtHeightExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuditBuffer_BlockAtHeightExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockAtHeightExists'
type AuditBuffer_BlockAtHeightExists_Call struct {
	*mock.Call
}

// BlockAtHeightExists is a helper method to define mock.On call
//   - height uint64
func (_e *AuditBuffer_Expecter) BlockAtHeightExists(height interface{}) *AuditBuffer_BlockAtHeightExists_Call {
	return &AuditBuffer_BlockAtHeightExists_Call{Call: _e.mock.On("BlockAtHeightExists", height)}
}

func (_c *AuditBuffer_BlockAtHeightExists_Call) Run(run func(height uint64)) *AuditBuffer_BlockAtHeightExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *AuditBuffer_BlockAtHeightExists_Call) Return(_a0 bool) *AuditBuffer_BlockAtHeightExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_BlockAtHeightExists_Call) RunAndReturn(run func(uint64) bool) *AuditBuffer_BlockAtHeightExists_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields:
func (_m *AuditBuffer) Clear() {
	_m.Called()
}

// AuditBuffer_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type AuditBuffer_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *AuditBuffer_Expecter) Clear() *AuditBuffer_Clear_Call {
	return &AuditBuffer_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *AuditBuffer_Clear_Call) Run(run func()) *AuditBuffer_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuditBuffer_Clear_Call) Return() *AuditBuffer_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuditBuffer_Clear_Call) RunAndReturn(run func()) *AuditBuffer_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockByHeight provides a mock function with given fields: height
func (_m *AuditBuffer) GetBlockByHeight(height uint64) (types.BlockWithNodes, bool) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockByHeight")
	}

	var r0 types.BlockWithNodes
	var r1 bool
	if rf, ok := ret.Get(0).(func(uint64) (types.BlockWithNodes, bool)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(uint64) types.BlockWithNodes); ok {
		r0 = rf(height)
	} else {
		r0 = ret.Get(0).(types.BlockWithNodes)
	}

	if rf, ok := ret.Get(1).(func(uint64) bool); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AuditBuffer_GetBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockByHeight'
type AuditBuffer_GetBlockByHeight_Call struct {
	*mock.Call
}

// GetBlockByHeight is a helper method to define mock.On call
//   - height uint64
func (_e *AuditBuffer_Expecter) GetBlockByHeight(height interface{}) *AuditBuffer_GetBlockByHeight_Call {
	return &AuditBuffer_GetBlockByHeight_Call{Call: _e.mock.On("GetBlockByHeight", height)}
}

func (_c *AuditBuffer_GetBlockByHeight_Call) Run(run func(height uint64)) *AuditBuffer_GetBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *AuditBuffer_GetBlockByHeight_Call) Return(_a0 types.BlockWithNodes, _a1 bool) *AuditBuffer_GetBlockByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditBuffer_GetBlockByHeight_Call) RunAndReturn(run func(uint64) (types.BlockWithNodes, bool)) *AuditBuffer_GetBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockContainingNode provides a mock function with given fields: addr
func (_m *AuditBuffer) GetBlockContainingNode(addr common.Address) (types.BlockWithNodes, bool) {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockContainingNode")
	}

	var r0 types.BlockWithNodes
	var r1 bool
	if rf, ok := ret.Get(0).(func(common.Address) (types.BlockWithNodes, bool)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(common.Address) types.BlockWithNodes); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(types.BlockWithNodes)
	}

	if rf, ok := ret.Get(1).(func(common.Address) bool); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AuditBuffer_GetBlockContainingNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockContainingNode'
type AuditBuffer_GetBlockContainingNode_Call struct {
	*mock.Call
}

// GetBlockContainingNode is a helper method to define mock.On call
//   - addr common.Address
func (_e *AuditBuffer_Expecter) GetBlockContainingNode(addr interface{}) *AuditBuffer_GetBlockContainingNode_Call {
	return &AuditBuffer_GetBlockContainingNode_Call{Call: _e.mock.On("GetBlockContainingNode", addr)}
}

func (_c *AuditBuffer_GetBlockContainingNode_Call) Run(run func(addr common.Address)) *AuditBuffer_GetBlockContainingNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *AuditBuffer_GetBlockContainingNode_Call) Return(_a0 types.BlockWithNodes, _a1 bool) *AuditBuffer_GetBlockContainingNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditBuffer_GetBlockContainingNode_Call) RunAndReturn(run func(common.Address) (types.BlockWithNodes, bool)) *AuditBuffer_GetBlockContainingNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockHeightByNode provides a mock function with given fields: addr
func (_m *AuditBuffer) GetBlockHeightByNode(addr common.Address) (uint64, bool) {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockHeightByNode")
	}

	var r0 uint64
	var r1 bool
	if rf, ok := ret.Get(0).(func(common.Address) (uint64, bool)); ok {
		return rf(addr)
	}
	if rf, ok := ret.Get(0).(func(common.Address) uint64); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(common.Address) bool); ok {
		r1 = rf(addr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// AuditBuffer_GetBlockHeightByNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockHeightByNode'
type AuditBuffer_GetBlockHeightByNode_Call struct {
	*mock.Call
}

// GetBlockHeightByNode is a helper method to define mock.On call
//   - addr common.Address
func (_e *AuditBuffer_Expecter) GetBlockHeightByNode(addr interface{}) *AuditBuffer_GetBlockHeightByNode_Call {
	return &AuditBuffer_GetBlockHeightByNode_Call{Call: _e.mock.On("GetBlockHeightByNode", addr)}
}

func (_c *AuditBuffer_GetBlockHeightByNode_Call) Run(run func(addr common.Address)) *AuditBuffer_GetBlockHeightByNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *AuditBuffer_GetBlockHeightByNode_Call) Return(_a0 uint64, _a1 bool) *AuditBuffer_GetBlockHeightByNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuditBuffer_GetBlockHeightByNode_Call) RunAndReturn(run func(common.Address) (uint64, bool)) *AuditBuffer_GetBlockHeightByNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeadHeight provides a mock function with given fields:
func (_m *AuditBuffer) GetHeadHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetHeadHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// AuditBuffer_GetHeadHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeadHeight'
type AuditBuffer_GetHeadHeight_Call struct {
	*mock.Call
}

// GetHeadHeight is a helper method to define mock.On call
func (_e *AuditBuffer_Expecter) GetHeadHeight() *AuditBuffer_GetHeadHeight_Call {
	return &AuditBuffer_GetHeadHeight_Call{Call: _e.mock.On("GetHeadHeight")}
}

func (_c *AuditBuffer_GetHeadHeight_Call) Run(run func()) *AuditBuffer_GetHeadHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuditBuffer_GetHeadHeight_Call) Return(_a0 uint64) *AuditBuffer_GetHeadHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_GetHeadHeight_Call) RunAndReturn(run func() uint64) *AuditBuffer_GetHeadHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetTailHeight provides a mock function with given fields:
func (_m *AuditBuffer) GetTailHeight() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTailHeight")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// AuditBuffer_GetTailHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTailHeight'
type AuditBuffer_GetTailHeight_Call struct {
	*mock.Call
}

// GetTailHeight is a helper method to define mock.On call
func (_e *AuditBuffer_Expecter) GetTailHeight() *AuditBuffer_GetTailHeight_Call {
	return &AuditBuffer_GetTailHeight_Call{Call: _e.mock.On("GetTailHeight")}
}

func (_c *AuditBuffer_GetTailHeight_Call) Run(run func()) *AuditBuffer_GetTailHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuditBuffer_GetTailHeight_Call) Return(_a0 uint64) *AuditBuffer_GetTailHeight_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_GetTailHeight_Call) RunAndReturn(run func() uint64) *AuditBuffer_GetTailHeight_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBlocksWithNodes provides a mock function with given fields: blocks
func (_m *AuditBuffer) InsertBlocksWithNodes(blocks []types.BlockWithNodes) {
	_m.Called(blocks)
}

// AuditBuffer_InsertBlocksWithNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBlocksWithNodes'
type AuditBuffer_InsertBlocksWithNodes_Call struct {
	*mock.Call
}

// InsertBlocksWithNodes is a helper method to define mock.On call
//   - blocks []types.BlockWithNodes
func (_e *AuditBuffer_Expecter) InsertBlocksWithNodes(blocks interface{}) *AuditBuffer_InsertBlocksWithNodes_Call {
	return &AuditBuffer_InsertBlocksWithNodes_Call{Call: _e.mock.On("InsertBlocksWithNodes", blocks)}
}

func (_c *AuditBuffer_InsertBlocksWithNodes_Call) Run(run func(blocks []types.BlockWithNodes)) *AuditBuffer_InsertBlocksWithNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]types.BlockWithNodes))
	})
	return _c
}

func (_c *AuditBuffer_InsertBlocksWithNodes_Call) Return() *AuditBuffer_InsertBlocksWithNodes_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuditBuffer_InsertBlocksWithNodes_Call) RunAndReturn(run func([]types.BlockWithNodes)) *AuditBuffer_InsertBlocksWithNodes_Call {
	_c.Call.Return(run)
	return _c
}

// NodeExists provides a mock function with given fields: addr
func (_m *AuditBuffer) NodeExists(addr common.Address) bool {
	ret := _m.Called(addr)

	if len(ret) == 0 {
		panic("no return value specified for NodeExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(addr)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuditBuffer_NodeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeExists'
type AuditBuffer_NodeExists_Call struct {
	*mock.Call
}

// NodeExists is a helper method to define mock.On call
//   - addr common.Address
func (_e *AuditBuffer_Expecter) NodeExists(addr interface{}) *AuditBuffer_NodeExists_Call {
	return &AuditBuffer_NodeExists_Call{Call: _e.mock.On("NodeExists", addr)}
}

func (_c *AuditBuffer_NodeExists_Call) Run(run func(addr common.Address)) *AuditBuffer_NodeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *AuditBuffer_NodeExists_Call) Return(_a0 bool) *AuditBuffer_NodeExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_NodeExists_Call) RunAndReturn(run func(common.Address) bool) *AuditBuffer_NodeExists_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveNBlocks provides a mock function with given fields: n
func (_m *AuditBuffer) RemoveNBlocks(n uint64) []types.BlockWithNodes {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for RemoveNBlocks")
	}

	var r0 []types.BlockWithNodes
	if rf, ok := ret.Get(0).(func(uint64) []types.BlockWithNodes); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.BlockWithNodes)
		}
	}

	return r0
}

// AuditBuffer_RemoveNBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveNBlocks'
type AuditBuffer_RemoveNBlocks_Call struct {
	*mock.Call
}

// RemoveNBlocks is a helper method to define mock.On call
//   - n uint64
func (_e *AuditBuffer_Expecter) RemoveNBlocks(n interface{}) *AuditBuffer_RemoveNBlocks_Call {
	return &AuditBuffer_RemoveNBlocks_Call{Call: _e.mock.On("RemoveNBlocks", n)}
}

func (_c *AuditBuffer_RemoveNBlocks_Call) Run(run func(n uint64)) *AuditBuffer_RemoveNBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *AuditBuffer_RemoveNBlocks_Call) Return(_a0 []types.BlockWithNodes) *AuditBuffer_RemoveNBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_RemoveNBlocks_Call) RunAndReturn(run func(uint64) []types.BlockWithNodes) *AuditBuffer_RemoveNBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with given fields:
func (_m *AuditBuffer) Size() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// AuditBuffer_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type AuditBuffer_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *AuditBuffer_Expecter) Size() *AuditBuffer_Size_Call {
	return &AuditBuffer_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *AuditBuffer_Size_Call) Run(run func()) *AuditBuffer_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuditBuffer_Size_Call) Return(_a0 uint64) *AuditBuffer_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuditBuffer_Size_Call) RunAndReturn(run func() uint64) *AuditBuffer_Size_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuditBuffer creates a new instance of AuditBuffer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditBuffer(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditBuffer {
	mock := &AuditBuffer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
