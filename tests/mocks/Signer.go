// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	ecdsa "crypto/ecdsa"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// Signer is an autogenerated mock type for the Signer type
type Signer struct {
	mock.Mock
}

type Signer_Expecter struct {
	mock *mock.Mock
}

func (_m *Signer) EXPECT() *Signer_Expecter {
	return &Signer_Expecter{mock: &_m.Mock}
}

// Address provides a mock function with given fields:
func (_m *Signer) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// Signer_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type Signer_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *Signer_Expecter) Address() *Signer_Address_Call {
	return &Signer_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *Signer_Address_Call) Run(run func()) *Signer_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_Address_Call) Return(_a0 common.Address) *Signer_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_Address_Call) RunAndReturn(run func() common.Address) *Signer_Address_Call {
	_c.Call.Return(run)
	return _c
}

// PrivateKey provides a mock function with given fields:
func (_m *Signer) PrivateKey() *ecdsa.PrivateKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PrivateKey")
	}

	var r0 *ecdsa.PrivateKey
	if rf, ok := ret.Get(0).(func() *ecdsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PrivateKey)
		}
	}

	return r0
}

// Signer_PrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrivateKey'
type Signer_PrivateKey_Call struct {
	*mock.Call
}

// PrivateKey is a helper method to define mock.On call
func (_e *Signer_Expecter) PrivateKey() *Signer_PrivateKey_Call {
	return &Signer_PrivateKey_Call{Call: _e.mock.On("PrivateKey")}
}

func (_c *Signer_PrivateKey_Call) Run(run func()) *Signer_PrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_PrivateKey_Call) Return(_a0 *ecdsa.PrivateKey) *Signer_PrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_PrivateKey_Call) RunAndReturn(run func() *ecdsa.PrivateKey) *Signer_PrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKey provides a mock function with given fields:
func (_m *Signer) PublicKey() *ecdsa.PublicKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKey")
	}

	var r0 *ecdsa.PublicKey
	if rf, ok := ret.Get(0).(func() *ecdsa.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecdsa.PublicKey)
		}
	}

	return r0
}

// Signer_PublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKey'
type Signer_PublicKey_Call struct {
	*mock.Call
}

// PublicKey is a helper method to define mock.On call
func (_e *Signer_Expecter) PublicKey() *Signer_PublicKey_Call {
	return &Signer_PublicKey_Call{Call: _e.mock.On("PublicKey")}
}

func (_c *Signer_PublicKey_Call) Run(run func()) *Signer_PublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_PublicKey_Call) Return(_a0 *ecdsa.PublicKey) *Signer_PublicKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_PublicKey_Call) RunAndReturn(run func() *ecdsa.PublicKey) *Signer_PublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// PublicKeyBytes provides a mock function with given fields:
func (_m *Signer) PublicKeyBytes() []byte {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PublicKeyBytes")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// Signer_PublicKeyBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublicKeyBytes'
type Signer_PublicKeyBytes_Call struct {
	*mock.Call
}

// PublicKeyBytes is a helper method to define mock.On call
func (_e *Signer_Expecter) PublicKeyBytes() *Signer_PublicKeyBytes_Call {
	return &Signer_PublicKeyBytes_Call{Call: _e.mock.On("PublicKeyBytes")}
}

func (_c *Signer_PublicKeyBytes_Call) Run(run func()) *Signer_PublicKeyBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Signer_PublicKeyBytes_Call) Return(_a0 []byte) *Signer_PublicKeyBytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Signer_PublicKeyBytes_Call) RunAndReturn(run func() []byte) *Signer_PublicKeyBytes_Call {
	_c.Call.Return(run)
	return _c
}

// Sign provides a mock function with given fields: message
func (_m *Signer) Sign(message []byte) ([]byte, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]byte, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Signer_Sign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sign'
type Signer_Sign_Call struct {
	*mock.Call
}

// Sign is a helper method to define mock.On call
//   - message []byte
func (_e *Signer_Expecter) Sign(message interface{}) *Signer_Sign_Call {
	return &Signer_Sign_Call{Call: _e.mock.On("Sign", message)}
}

func (_c *Signer_Sign_Call) Run(run func(message []byte)) *Signer_Sign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *Signer_Sign_Call) Return(_a0 []byte, _a1 error) *Signer_Sign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Signer_Sign_Call) RunAndReturn(run func([]byte) ([]byte, error)) *Signer_Sign_Call {
	_c.Call.Return(run)
	return _c
}

// NewSigner creates a new instance of Signer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSigner(t interface {
	mock.TestingT
	Cleanup(func())
}) *Signer {
	mock := &Signer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
