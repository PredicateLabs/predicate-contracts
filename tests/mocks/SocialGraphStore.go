// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	backoff "github.com/PredicateLabs/predicate-avs/common/backoff"
	common "github.com/ethereum/go-ethereum/common"

	db "github.com/PredicateLabs/predicate-avs/operator/indexer/db"

	mock "github.com/stretchr/testify/mock"

	types "github.com/PredicateLabs/predicate-avs/operator/indexer/types"
)

// SocialGraphStore is an autogenerated mock type for the SocialGraphStore type
type SocialGraphStore struct {
	mock.Mock
}

type SocialGraphStore_Expecter struct {
	mock *mock.Mock
}

func (_m *SocialGraphStore) EXPECT() *SocialGraphStore_Expecter {
	return &SocialGraphStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *SocialGraphStore) Close() {
	_m.Called()
}

// SocialGraphStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type SocialGraphStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) Close() *SocialGraphStore_Close_Call {
	return &SocialGraphStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *SocialGraphStore_Close_Call) Run(run func()) *SocialGraphStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_Close_Call) Return() *SocialGraphStore_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocialGraphStore_Close_Call) RunAndReturn(run func()) *SocialGraphStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGraph provides a mock function with given fields: initNodes, startingBlockNum
func (_m *SocialGraphStore) CreateGraph(initNodes []common.Address, startingBlockNum uint64) error {
	ret := _m.Called(initNodes, startingBlockNum)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraph")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]common.Address, uint64) error); ok {
		r0 = rf(initNodes, startingBlockNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialGraphStore_CreateGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGraph'
type SocialGraphStore_CreateGraph_Call struct {
	*mock.Call
}

// CreateGraph is a helper method to define mock.On call
//   - initNodes []common.Address
//   - startingBlockNum uint64
func (_e *SocialGraphStore_Expecter) CreateGraph(initNodes interface{}, startingBlockNum interface{}) *SocialGraphStore_CreateGraph_Call {
	return &SocialGraphStore_CreateGraph_Call{Call: _e.mock.On("CreateGraph", initNodes, startingBlockNum)}
}

func (_c *SocialGraphStore_CreateGraph_Call) Run(run func(initNodes []common.Address, startingBlockNum uint64)) *SocialGraphStore_CreateGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]common.Address), args[1].(uint64))
	})
	return _c
}

func (_c *SocialGraphStore_CreateGraph_Call) Return(_a0 error) *SocialGraphStore_CreateGraph_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_CreateGraph_Call) RunAndReturn(run func([]common.Address, uint64) error) *SocialGraphStore_CreateGraph_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuditBuffer provides a mock function with given fields:
func (_m *SocialGraphStore) GetAuditBuffer() db.AuditBuffer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuditBuffer")
	}

	var r0 db.AuditBuffer
	if rf, ok := ret.Get(0).(func() db.AuditBuffer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.AuditBuffer)
		}
	}

	return r0
}

// SocialGraphStore_GetAuditBuffer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuditBuffer'
type SocialGraphStore_GetAuditBuffer_Call struct {
	*mock.Call
}

// GetAuditBuffer is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetAuditBuffer() *SocialGraphStore_GetAuditBuffer_Call {
	return &SocialGraphStore_GetAuditBuffer_Call{Call: _e.mock.On("GetAuditBuffer")}
}

func (_c *SocialGraphStore_GetAuditBuffer_Call) Run(run func()) *SocialGraphStore_GetAuditBuffer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetAuditBuffer_Call) Return(_a0 db.AuditBuffer) *SocialGraphStore_GetAuditBuffer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_GetAuditBuffer_Call) RunAndReturn(run func() db.AuditBuffer) *SocialGraphStore_GetAuditBuffer_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastIndexedBlock provides a mock function with given fields:
func (_m *SocialGraphStore) GetLastIndexedBlock() (uint64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastIndexedBlock")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func() (uint64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialGraphStore_GetLastIndexedBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastIndexedBlock'
type SocialGraphStore_GetLastIndexedBlock_Call struct {
	*mock.Call
}

// GetLastIndexedBlock is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetLastIndexedBlock() *SocialGraphStore_GetLastIndexedBlock_Call {
	return &SocialGraphStore_GetLastIndexedBlock_Call{Call: _e.mock.On("GetLastIndexedBlock")}
}

func (_c *SocialGraphStore_GetLastIndexedBlock_Call) Run(run func()) *SocialGraphStore_GetLastIndexedBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetLastIndexedBlock_Call) Return(_a0 uint64, _a1 error) *SocialGraphStore_GetLastIndexedBlock_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialGraphStore_GetLastIndexedBlock_Call) RunAndReturn(run func() (uint64, error)) *SocialGraphStore_GetLastIndexedBlock_Call {
	_c.Call.Return(run)
	return _c
}

// GetNode provides a mock function with given fields: address
func (_m *SocialGraphStore) GetNode(address common.Address) (types.SocialGraphNode, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for GetNode")
	}

	var r0 types.SocialGraphNode
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (types.SocialGraphNode, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) types.SocialGraphNode); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(types.SocialGraphNode)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialGraphStore_GetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNode'
type SocialGraphStore_GetNode_Call struct {
	*mock.Call
}

// GetNode is a helper method to define mock.On call
//   - address common.Address
func (_e *SocialGraphStore_Expecter) GetNode(address interface{}) *SocialGraphStore_GetNode_Call {
	return &SocialGraphStore_GetNode_Call{Call: _e.mock.On("GetNode", address)}
}

func (_c *SocialGraphStore_GetNode_Call) Run(run func(address common.Address)) *SocialGraphStore_GetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *SocialGraphStore_GetNode_Call) Return(_a0 types.SocialGraphNode, _a1 error) *SocialGraphStore_GetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialGraphStore_GetNode_Call) RunAndReturn(run func(common.Address) (types.SocialGraphNode, error)) *SocialGraphStore_GetNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadBackoffConstant provides a mock function with given fields:
func (_m *SocialGraphStore) GetReadBackoffConstant() backoff.BackoffConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReadBackoffConstant")
	}

	var r0 backoff.BackoffConfig
	if rf, ok := ret.Get(0).(func() backoff.BackoffConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backoff.BackoffConfig)
	}

	return r0
}

// SocialGraphStore_GetReadBackoffConstant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadBackoffConstant'
type SocialGraphStore_GetReadBackoffConstant_Call struct {
	*mock.Call
}

// GetReadBackoffConstant is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetReadBackoffConstant() *SocialGraphStore_GetReadBackoffConstant_Call {
	return &SocialGraphStore_GetReadBackoffConstant_Call{Call: _e.mock.On("GetReadBackoffConstant")}
}

func (_c *SocialGraphStore_GetReadBackoffConstant_Call) Run(run func()) *SocialGraphStore_GetReadBackoffConstant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetReadBackoffConstant_Call) Return(_a0 backoff.BackoffConfig) *SocialGraphStore_GetReadBackoffConstant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_GetReadBackoffConstant_Call) RunAndReturn(run func() backoff.BackoffConfig) *SocialGraphStore_GetReadBackoffConstant_Call {
	_c.Call.Return(run)
	return _c
}

// GetReadBackoffExponential provides a mock function with given fields:
func (_m *SocialGraphStore) GetReadBackoffExponential() backoff.BackoffConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReadBackoffExponential")
	}

	var r0 backoff.BackoffConfig
	if rf, ok := ret.Get(0).(func() backoff.BackoffConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backoff.BackoffConfig)
	}

	return r0
}

// SocialGraphStore_GetReadBackoffExponential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReadBackoffExponential'
type SocialGraphStore_GetReadBackoffExponential_Call struct {
	*mock.Call
}

// GetReadBackoffExponential is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetReadBackoffExponential() *SocialGraphStore_GetReadBackoffExponential_Call {
	return &SocialGraphStore_GetReadBackoffExponential_Call{Call: _e.mock.On("GetReadBackoffExponential")}
}

func (_c *SocialGraphStore_GetReadBackoffExponential_Call) Run(run func()) *SocialGraphStore_GetReadBackoffExponential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetReadBackoffExponential_Call) Return(_a0 backoff.BackoffConfig) *SocialGraphStore_GetReadBackoffExponential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_GetReadBackoffExponential_Call) RunAndReturn(run func() backoff.BackoffConfig) *SocialGraphStore_GetReadBackoffExponential_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootHash provides a mock function with given fields:
func (_m *SocialGraphStore) GetRootHash() (types.RootHash, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootHash")
	}

	var r0 types.RootHash
	var r1 error
	if rf, ok := ret.Get(0).(func() (types.RootHash, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() types.RootHash); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(types.RootHash)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialGraphStore_GetRootHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootHash'
type SocialGraphStore_GetRootHash_Call struct {
	*mock.Call
}

// GetRootHash is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetRootHash() *SocialGraphStore_GetRootHash_Call {
	return &SocialGraphStore_GetRootHash_Call{Call: _e.mock.On("GetRootHash")}
}

func (_c *SocialGraphStore_GetRootHash_Call) Run(run func()) *SocialGraphStore_GetRootHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetRootHash_Call) Return(_a0 types.RootHash, _a1 error) *SocialGraphStore_GetRootHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialGraphStore_GetRootHash_Call) RunAndReturn(run func() (types.RootHash, error)) *SocialGraphStore_GetRootHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetWriteBackoffConstant provides a mock function with given fields:
func (_m *SocialGraphStore) GetWriteBackoffConstant() backoff.BackoffConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWriteBackoffConstant")
	}

	var r0 backoff.BackoffConfig
	if rf, ok := ret.Get(0).(func() backoff.BackoffConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backoff.BackoffConfig)
	}

	return r0
}

// SocialGraphStore_GetWriteBackoffConstant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWriteBackoffConstant'
type SocialGraphStore_GetWriteBackoffConstant_Call struct {
	*mock.Call
}

// GetWriteBackoffConstant is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetWriteBackoffConstant() *SocialGraphStore_GetWriteBackoffConstant_Call {
	return &SocialGraphStore_GetWriteBackoffConstant_Call{Call: _e.mock.On("GetWriteBackoffConstant")}
}

func (_c *SocialGraphStore_GetWriteBackoffConstant_Call) Run(run func()) *SocialGraphStore_GetWriteBackoffConstant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetWriteBackoffConstant_Call) Return(_a0 backoff.BackoffConfig) *SocialGraphStore_GetWriteBackoffConstant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_GetWriteBackoffConstant_Call) RunAndReturn(run func() backoff.BackoffConfig) *SocialGraphStore_GetWriteBackoffConstant_Call {
	_c.Call.Return(run)
	return _c
}

// GetWriteBackoffExponential provides a mock function with given fields:
func (_m *SocialGraphStore) GetWriteBackoffExponential() backoff.BackoffConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWriteBackoffExponential")
	}

	var r0 backoff.BackoffConfig
	if rf, ok := ret.Get(0).(func() backoff.BackoffConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backoff.BackoffConfig)
	}

	return r0
}

// SocialGraphStore_GetWriteBackoffExponential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWriteBackoffExponential'
type SocialGraphStore_GetWriteBackoffExponential_Call struct {
	*mock.Call
}

// GetWriteBackoffExponential is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) GetWriteBackoffExponential() *SocialGraphStore_GetWriteBackoffExponential_Call {
	return &SocialGraphStore_GetWriteBackoffExponential_Call{Call: _e.mock.On("GetWriteBackoffExponential")}
}

func (_c *SocialGraphStore_GetWriteBackoffExponential_Call) Run(run func()) *SocialGraphStore_GetWriteBackoffExponential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_GetWriteBackoffExponential_Call) Return(_a0 backoff.BackoffConfig) *SocialGraphStore_GetWriteBackoffExponential_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_GetWriteBackoffExponential_Call) RunAndReturn(run func() backoff.BackoffConfig) *SocialGraphStore_GetWriteBackoffExponential_Call {
	_c.Call.Return(run)
	return _c
}

// InsertLatestBlock provides a mock function with given fields: blockNum
func (_m *SocialGraphStore) InsertLatestBlock(blockNum uint64) error {
	ret := _m.Called(blockNum)

	if len(ret) == 0 {
		panic("no return value specified for InsertLatestBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(blockNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialGraphStore_InsertLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertLatestBlock'
type SocialGraphStore_InsertLatestBlock_Call struct {
	*mock.Call
}

// InsertLatestBlock is a helper method to define mock.On call
//   - blockNum uint64
func (_e *SocialGraphStore_Expecter) InsertLatestBlock(blockNum interface{}) *SocialGraphStore_InsertLatestBlock_Call {
	return &SocialGraphStore_InsertLatestBlock_Call{Call: _e.mock.On("InsertLatestBlock", blockNum)}
}

func (_c *SocialGraphStore_InsertLatestBlock_Call) Run(run func(blockNum uint64)) *SocialGraphStore_InsertLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *SocialGraphStore_InsertLatestBlock_Call) Return(_a0 error) *SocialGraphStore_InsertLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_InsertLatestBlock_Call) RunAndReturn(run func(uint64) error) *SocialGraphStore_InsertLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// InsertNodesWithLatestBlock provides a mock function with given fields: addresses, blockNum
func (_m *SocialGraphStore) InsertNodesWithLatestBlock(addresses []common.Address, blockNum uint64) error {
	ret := _m.Called(addresses, blockNum)

	if len(ret) == 0 {
		panic("no return value specified for InsertNodesWithLatestBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]common.Address, uint64) error); ok {
		r0 = rf(addresses, blockNum)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocialGraphStore_InsertNodesWithLatestBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertNodesWithLatestBlock'
type SocialGraphStore_InsertNodesWithLatestBlock_Call struct {
	*mock.Call
}

// InsertNodesWithLatestBlock is a helper method to define mock.On call
//   - addresses []common.Address
//   - blockNum uint64
func (_e *SocialGraphStore_Expecter) InsertNodesWithLatestBlock(addresses interface{}, blockNum interface{}) *SocialGraphStore_InsertNodesWithLatestBlock_Call {
	return &SocialGraphStore_InsertNodesWithLatestBlock_Call{Call: _e.mock.On("InsertNodesWithLatestBlock", addresses, blockNum)}
}

func (_c *SocialGraphStore_InsertNodesWithLatestBlock_Call) Run(run func(addresses []common.Address, blockNum uint64)) *SocialGraphStore_InsertNodesWithLatestBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]common.Address), args[1].(uint64))
	})
	return _c
}

func (_c *SocialGraphStore_InsertNodesWithLatestBlock_Call) Return(_a0 error) *SocialGraphStore_InsertNodesWithLatestBlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocialGraphStore_InsertNodesWithLatestBlock_Call) RunAndReturn(run func([]common.Address, uint64) error) *SocialGraphStore_InsertNodesWithLatestBlock_Call {
	_c.Call.Return(run)
	return _c
}

// NodeExists provides a mock function with given fields: address
func (_m *SocialGraphStore) NodeExists(address common.Address) (bool, error) {
	ret := _m.Called(address)

	if len(ret) == 0 {
		panic("no return value specified for NodeExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(common.Address) (bool, error)); ok {
		return rf(address)
	}
	if rf, ok := ret.Get(0).(func(common.Address) bool); ok {
		r0 = rf(address)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialGraphStore_NodeExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeExists'
type SocialGraphStore_NodeExists_Call struct {
	*mock.Call
}

// NodeExists is a helper method to define mock.On call
//   - address common.Address
func (_e *SocialGraphStore_Expecter) NodeExists(address interface{}) *SocialGraphStore_NodeExists_Call {
	return &SocialGraphStore_NodeExists_Call{Call: _e.mock.On("NodeExists", address)}
}

func (_c *SocialGraphStore_NodeExists_Call) Run(run func(address common.Address)) *SocialGraphStore_NodeExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(common.Address))
	})
	return _c
}

func (_c *SocialGraphStore_NodeExists_Call) Return(_a0 bool, _a1 error) *SocialGraphStore_NodeExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialGraphStore_NodeExists_Call) RunAndReturn(run func(common.Address) (bool, error)) *SocialGraphStore_NodeExists_Call {
	_c.Call.Return(run)
	return _c
}

// SocialGraphExists provides a mock function with given fields:
func (_m *SocialGraphStore) SocialGraphExists() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SocialGraphExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SocialGraphStore_SocialGraphExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SocialGraphExists'
type SocialGraphStore_SocialGraphExists_Call struct {
	*mock.Call
}

// SocialGraphExists is a helper method to define mock.On call
func (_e *SocialGraphStore_Expecter) SocialGraphExists() *SocialGraphStore_SocialGraphExists_Call {
	return &SocialGraphStore_SocialGraphExists_Call{Call: _e.mock.On("SocialGraphExists")}
}

func (_c *SocialGraphStore_SocialGraphExists_Call) Run(run func()) *SocialGraphStore_SocialGraphExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SocialGraphStore_SocialGraphExists_Call) Return(_a0 bool, _a1 error) *SocialGraphStore_SocialGraphExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SocialGraphStore_SocialGraphExists_Call) RunAndReturn(run func() (bool, error)) *SocialGraphStore_SocialGraphExists_Call {
	_c.Call.Return(run)
	return _c
}

// NewSocialGraphStore creates a new instance of SocialGraphStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocialGraphStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *SocialGraphStore {
	mock := &SocialGraphStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
