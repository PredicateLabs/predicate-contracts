// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ServiceManager "github.com/PredicateLabs/predicate-avs/gen/bindings/ServiceManager"

	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"

	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"
)

// ServiceManagerCalls is an autogenerated mock type for the ServiceManagerCalls type
type ServiceManagerCalls struct {
	mock.Mock
}

type ServiceManagerCalls_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceManagerCalls) EXPECT() *ServiceManagerCalls_Expecter {
	return &ServiceManagerCalls_Expecter{mock: &_m.Mock}
}

// Aggregator provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) Aggregator(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Aggregator")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_Aggregator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregator'
type ServiceManagerCalls_Aggregator_Call struct {
	*mock.Call
}

// Aggregator is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) Aggregator(opts interface{}) *ServiceManagerCalls_Aggregator_Call {
	return &ServiceManagerCalls_Aggregator_Call{Call: _e.mock.On("Aggregator", opts)}
}

func (_c *ServiceManagerCalls_Aggregator_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_Aggregator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_Aggregator_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_Aggregator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_Aggregator_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *ServiceManagerCalls_Aggregator_Call {
	_c.Call.Return(run)
	return _c
}

// AvsDirectory provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) AvsDirectory(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AvsDirectory")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_AvsDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvsDirectory'
type ServiceManagerCalls_AvsDirectory_Call struct {
	*mock.Call
}

// AvsDirectory is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) AvsDirectory(opts interface{}) *ServiceManagerCalls_AvsDirectory_Call {
	return &ServiceManagerCalls_AvsDirectory_Call{Call: _e.mock.On("AvsDirectory", opts)}
}

func (_c *ServiceManagerCalls_AvsDirectory_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_AvsDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_AvsDirectory_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_AvsDirectory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_AvsDirectory_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *ServiceManagerCalls_AvsDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// ClientToPolicy provides a mock function with given fields: opts, arg0, arg1
func (_m *ServiceManagerCalls) ClientToPolicy(opts *bind.CallOpts, arg0 common.Address, arg1 string) (bool, error) {
	ret := _m.Called(opts, arg0, arg1)

	if len(ret) == 0 {
		panic("no return value specified for ClientToPolicy")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, string) (bool, error)); ok {
		return rf(opts, arg0, arg1)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, string) bool); ok {
		r0 = rf(opts, arg0, arg1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, string) error); ok {
		r1 = rf(opts, arg0, arg1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_ClientToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientToPolicy'
type ServiceManagerCalls_ClientToPolicy_Call struct {
	*mock.Call
}

// ClientToPolicy is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 common.Address
//   - arg1 string
func (_e *ServiceManagerCalls_Expecter) ClientToPolicy(opts interface{}, arg0 interface{}, arg1 interface{}) *ServiceManagerCalls_ClientToPolicy_Call {
	return &ServiceManagerCalls_ClientToPolicy_Call{Call: _e.mock.On("ClientToPolicy", opts, arg0, arg1)}
}

func (_c *ServiceManagerCalls_ClientToPolicy_Call) Run(run func(opts *bind.CallOpts, arg0 common.Address, arg1 string)) *ServiceManagerCalls_ClientToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].(string))
	})
	return _c
}

func (_c *ServiceManagerCalls_ClientToPolicy_Call) Return(_a0 bool, _a1 error) *ServiceManagerCalls_ClientToPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_ClientToPolicy_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, string) (bool, error)) *ServiceManagerCalls_ClientToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DelegationManager provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) DelegationManager(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for DelegationManager")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_DelegationManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegationManager'
type ServiceManagerCalls_DelegationManager_Call struct {
	*mock.Call
}

// DelegationManager is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) DelegationManager(opts interface{}) *ServiceManagerCalls_DelegationManager_Call {
	return &ServiceManagerCalls_DelegationManager_Call{Call: _e.mock.On("DelegationManager", opts)}
}

func (_c *ServiceManagerCalls_DelegationManager_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_DelegationManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_DelegationManager_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_DelegationManager_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_DelegationManager_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *ServiceManagerCalls_DelegationManager_Call {
	_c.Call.Return(run)
	return _c
}

// DeployedPolicyIDs provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) DeployedPolicyIDs(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for DeployedPolicyIDs")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_DeployedPolicyIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeployedPolicyIDs'
type ServiceManagerCalls_DeployedPolicyIDs_Call struct {
	*mock.Call
}

// DeployedPolicyIDs is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 *big.Int
func (_e *ServiceManagerCalls_Expecter) DeployedPolicyIDs(opts interface{}, arg0 interface{}) *ServiceManagerCalls_DeployedPolicyIDs_Call {
	return &ServiceManagerCalls_DeployedPolicyIDs_Call{Call: _e.mock.On("DeployedPolicyIDs", opts, arg0)}
}

func (_c *ServiceManagerCalls_DeployedPolicyIDs_Call) Run(run func(opts *bind.CallOpts, arg0 *big.Int)) *ServiceManagerCalls_DeployedPolicyIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerCalls_DeployedPolicyIDs_Call) Return(_a0 string, _a1 error) *ServiceManagerCalls_DeployedPolicyIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_DeployedPolicyIDs_Call) RunAndReturn(run func(*bind.CallOpts, *big.Int) (string, error)) *ServiceManagerCalls_DeployedPolicyIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeployedPolicies provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) GetDeployedPolicies(opts *bind.CallOpts) ([]string, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployedPolicies")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []string); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_GetDeployedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeployedPolicies'
type ServiceManagerCalls_GetDeployedPolicies_Call struct {
	*mock.Call
}

// GetDeployedPolicies is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) GetDeployedPolicies(opts interface{}) *ServiceManagerCalls_GetDeployedPolicies_Call {
	return &ServiceManagerCalls_GetDeployedPolicies_Call{Call: _e.mock.On("GetDeployedPolicies", opts)}
}

func (_c *ServiceManagerCalls_GetDeployedPolicies_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_GetDeployedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_GetDeployedPolicies_Call) Return(_a0 []string, _a1 error) *ServiceManagerCalls_GetDeployedPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_GetDeployedPolicies_Call) RunAndReturn(run func(*bind.CallOpts) ([]string, error)) *ServiceManagerCalls_GetDeployedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetOperatorRestakedStrategies provides a mock function with given fields: opts, operator
func (_m *ServiceManagerCalls) GetOperatorRestakedStrategies(opts *bind.CallOpts, operator common.Address) ([]common.Address, error) {
	ret := _m.Called(opts, operator)

	if len(ret) == 0 {
		panic("no return value specified for GetOperatorRestakedStrategies")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) ([]common.Address, error)); ok {
		return rf(opts, operator)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) []common.Address); ok {
		r0 = rf(opts, operator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, operator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_GetOperatorRestakedStrategies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOperatorRestakedStrategies'
type ServiceManagerCalls_GetOperatorRestakedStrategies_Call struct {
	*mock.Call
}

// GetOperatorRestakedStrategies is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - operator common.Address
func (_e *ServiceManagerCalls_Expecter) GetOperatorRestakedStrategies(opts interface{}, operator interface{}) *ServiceManagerCalls_GetOperatorRestakedStrategies_Call {
	return &ServiceManagerCalls_GetOperatorRestakedStrategies_Call{Call: _e.mock.On("GetOperatorRestakedStrategies", opts, operator)}
}

func (_c *ServiceManagerCalls_GetOperatorRestakedStrategies_Call) Run(run func(opts *bind.CallOpts, operator common.Address)) *ServiceManagerCalls_GetOperatorRestakedStrategies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerCalls_GetOperatorRestakedStrategies_Call) Return(_a0 []common.Address, _a1 error) *ServiceManagerCalls_GetOperatorRestakedStrategies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_GetOperatorRestakedStrategies_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) ([]common.Address, error)) *ServiceManagerCalls_GetOperatorRestakedStrategies_Call {
	_c.Call.Return(run)
	return _c
}

// GetRestakeableStrategies provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) GetRestakeableStrategies(opts *bind.CallOpts) ([]common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetRestakeableStrategies")
	}

	var r0 []common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_GetRestakeableStrategies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRestakeableStrategies'
type ServiceManagerCalls_GetRestakeableStrategies_Call struct {
	*mock.Call
}

// GetRestakeableStrategies is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) GetRestakeableStrategies(opts interface{}) *ServiceManagerCalls_GetRestakeableStrategies_Call {
	return &ServiceManagerCalls_GetRestakeableStrategies_Call{Call: _e.mock.On("GetRestakeableStrategies", opts)}
}

func (_c *ServiceManagerCalls_GetRestakeableStrategies_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_GetRestakeableStrategies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_GetRestakeableStrategies_Call) Return(_a0 []common.Address, _a1 error) *ServiceManagerCalls_GetRestakeableStrategies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_GetRestakeableStrategies_Call) RunAndReturn(run func(*bind.CallOpts) ([]common.Address, error)) *ServiceManagerCalls_GetRestakeableStrategies_Call {
	_c.Call.Return(run)
	return _c
}

// GetSocialGraphIDs provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) GetSocialGraphIDs(opts *bind.CallOpts) ([]string, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for GetSocialGraphIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ([]string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) []string); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_GetSocialGraphIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSocialGraphIDs'
type ServiceManagerCalls_GetSocialGraphIDs_Call struct {
	*mock.Call
}

// GetSocialGraphIDs is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) GetSocialGraphIDs(opts interface{}) *ServiceManagerCalls_GetSocialGraphIDs_Call {
	return &ServiceManagerCalls_GetSocialGraphIDs_Call{Call: _e.mock.On("GetSocialGraphIDs", opts)}
}

func (_c *ServiceManagerCalls_GetSocialGraphIDs_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_GetSocialGraphIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_GetSocialGraphIDs_Call) Return(_a0 []string, _a1 error) *ServiceManagerCalls_GetSocialGraphIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_GetSocialGraphIDs_Call) RunAndReturn(run func(*bind.CallOpts) ([]string, error)) *ServiceManagerCalls_GetSocialGraphIDs_Call {
	_c.Call.Return(run)
	return _c
}

// HashTaskWithExpiry provides a mock function with given fields: opts, _task
func (_m *ServiceManagerCalls) HashTaskWithExpiry(opts *bind.CallOpts, _task ServiceManager.Task) ([32]byte, error) {
	ret := _m.Called(opts, _task)

	if len(ret) == 0 {
		panic("no return value specified for HashTaskWithExpiry")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, ServiceManager.Task) ([32]byte, error)); ok {
		return rf(opts, _task)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, ServiceManager.Task) [32]byte); ok {
		r0 = rf(opts, _task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, ServiceManager.Task) error); ok {
		r1 = rf(opts, _task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_HashTaskWithExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashTaskWithExpiry'
type ServiceManagerCalls_HashTaskWithExpiry_Call struct {
	*mock.Call
}

// HashTaskWithExpiry is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - _task ServiceManager.Task
func (_e *ServiceManagerCalls_Expecter) HashTaskWithExpiry(opts interface{}, _task interface{}) *ServiceManagerCalls_HashTaskWithExpiry_Call {
	return &ServiceManagerCalls_HashTaskWithExpiry_Call{Call: _e.mock.On("HashTaskWithExpiry", opts, _task)}
}

func (_c *ServiceManagerCalls_HashTaskWithExpiry_Call) Run(run func(opts *bind.CallOpts, _task ServiceManager.Task)) *ServiceManagerCalls_HashTaskWithExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(ServiceManager.Task))
	})
	return _c
}

func (_c *ServiceManagerCalls_HashTaskWithExpiry_Call) Return(_a0 [32]byte, _a1 error) *ServiceManagerCalls_HashTaskWithExpiry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_HashTaskWithExpiry_Call) RunAndReturn(run func(*bind.CallOpts, ServiceManager.Task) ([32]byte, error)) *ServiceManagerCalls_HashTaskWithExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// IdToPolicy provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) IdToPolicy(opts *bind.CallOpts, arg0 string) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for IdToPolicy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_IdToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdToPolicy'
type ServiceManagerCalls_IdToPolicy_Call struct {
	*mock.Call
}

// IdToPolicy is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 string
func (_e *ServiceManagerCalls_Expecter) IdToPolicy(opts interface{}, arg0 interface{}) *ServiceManagerCalls_IdToPolicy_Call {
	return &ServiceManagerCalls_IdToPolicy_Call{Call: _e.mock.On("IdToPolicy", opts, arg0)}
}

func (_c *ServiceManagerCalls_IdToPolicy_Call) Run(run func(opts *bind.CallOpts, arg0 string)) *ServiceManagerCalls_IdToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerCalls_IdToPolicy_Call) Return(_a0 string, _a1 error) *ServiceManagerCalls_IdToPolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_IdToPolicy_Call) RunAndReturn(run func(*bind.CallOpts, string) (string, error)) *ServiceManagerCalls_IdToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// IdToSocialGraph provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) IdToSocialGraph(opts *bind.CallOpts, arg0 string) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for IdToSocialGraph")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_IdToSocialGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdToSocialGraph'
type ServiceManagerCalls_IdToSocialGraph_Call struct {
	*mock.Call
}

// IdToSocialGraph is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 string
func (_e *ServiceManagerCalls_Expecter) IdToSocialGraph(opts interface{}, arg0 interface{}) *ServiceManagerCalls_IdToSocialGraph_Call {
	return &ServiceManagerCalls_IdToSocialGraph_Call{Call: _e.mock.On("IdToSocialGraph", opts, arg0)}
}

func (_c *ServiceManagerCalls_IdToSocialGraph_Call) Run(run func(opts *bind.CallOpts, arg0 string)) *ServiceManagerCalls_IdToSocialGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerCalls_IdToSocialGraph_Call) Return(_a0 string, _a1 error) *ServiceManagerCalls_IdToSocialGraph_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_IdToSocialGraph_Call) RunAndReturn(run func(*bind.CallOpts, string) (string, error)) *ServiceManagerCalls_IdToSocialGraph_Call {
	_c.Call.Return(run)
	return _c
}

// Operators provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) Operators(opts *bind.CallOpts, arg0 common.Address) (struct {
	TotalStake *big.Int
	Status     uint8
}, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Operators")
	}

	var r0 struct {
		TotalStake *big.Int
		Status     uint8
	}
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (struct {
		TotalStake *big.Int
		Status     uint8
	}, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) struct {
		TotalStake *big.Int
		Status     uint8
	}); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(struct {
			TotalStake *big.Int
			Status     uint8
		})
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_Operators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Operators'
type ServiceManagerCalls_Operators_Call struct {
	*mock.Call
}

// Operators is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 common.Address
func (_e *ServiceManagerCalls_Expecter) Operators(opts interface{}, arg0 interface{}) *ServiceManagerCalls_Operators_Call {
	return &ServiceManagerCalls_Operators_Call{Call: _e.mock.On("Operators", opts, arg0)}
}

func (_c *ServiceManagerCalls_Operators_Call) Run(run func(opts *bind.CallOpts, arg0 common.Address)) *ServiceManagerCalls_Operators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerCalls_Operators_Call) Return(_a0 struct {
	TotalStake *big.Int
	Status     uint8
}, _a1 error) *ServiceManagerCalls_Operators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_Operators_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (struct {
	TotalStake *big.Int
	Status     uint8
}, error)) *ServiceManagerCalls_Operators_Call {
	_c.Call.Return(run)
	return _c
}

// Owner provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Owner")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_Owner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Owner'
type ServiceManagerCalls_Owner_Call struct {
	*mock.Call
}

// Owner is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) Owner(opts interface{}) *ServiceManagerCalls_Owner_Call {
	return &ServiceManagerCalls_Owner_Call{Call: _e.mock.On("Owner", opts)}
}

func (_c *ServiceManagerCalls_Owner_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_Owner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_Owner_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_Owner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_Owner_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *ServiceManagerCalls_Owner_Call {
	_c.Call.Return(run)
	return _c
}

// SigningKeyToOperator provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) SigningKeyToOperator(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for SigningKeyToOperator")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (common.Address, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) common.Address); ok {
		r0 = rf(opts, arg0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_SigningKeyToOperator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SigningKeyToOperator'
type ServiceManagerCalls_SigningKeyToOperator_Call struct {
	*mock.Call
}

// SigningKeyToOperator is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 common.Address
func (_e *ServiceManagerCalls_Expecter) SigningKeyToOperator(opts interface{}, arg0 interface{}) *ServiceManagerCalls_SigningKeyToOperator_Call {
	return &ServiceManagerCalls_SigningKeyToOperator_Call{Call: _e.mock.On("SigningKeyToOperator", opts, arg0)}
}

func (_c *ServiceManagerCalls_SigningKeyToOperator_Call) Run(run func(opts *bind.CallOpts, arg0 common.Address)) *ServiceManagerCalls_SigningKeyToOperator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *ServiceManagerCalls_SigningKeyToOperator_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_SigningKeyToOperator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_SigningKeyToOperator_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (common.Address, error)) *ServiceManagerCalls_SigningKeyToOperator_Call {
	_c.Call.Return(run)
	return _c
}

// SocialGraphIDs provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) SocialGraphIDs(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for SocialGraphIDs")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (string, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) string); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_SocialGraphIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SocialGraphIDs'
type ServiceManagerCalls_SocialGraphIDs_Call struct {
	*mock.Call
}

// SocialGraphIDs is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 *big.Int
func (_e *ServiceManagerCalls_Expecter) SocialGraphIDs(opts interface{}, arg0 interface{}) *ServiceManagerCalls_SocialGraphIDs_Call {
	return &ServiceManagerCalls_SocialGraphIDs_Call{Call: _e.mock.On("SocialGraphIDs", opts, arg0)}
}

func (_c *ServiceManagerCalls_SocialGraphIDs_Call) Run(run func(opts *bind.CallOpts, arg0 *big.Int)) *ServiceManagerCalls_SocialGraphIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerCalls_SocialGraphIDs_Call) Return(_a0 string, _a1 error) *ServiceManagerCalls_SocialGraphIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_SocialGraphIDs_Call) RunAndReturn(run func(*bind.CallOpts, *big.Int) (string, error)) *ServiceManagerCalls_SocialGraphIDs_Call {
	_c.Call.Return(run)
	return _c
}

// SpentTaskIDs provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) SpentTaskIDs(opts *bind.CallOpts, arg0 string) (bool, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for SpentTaskIDs")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) (bool, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, string) bool); ok {
		r0 = rf(opts, arg0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, string) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_SpentTaskIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SpentTaskIDs'
type ServiceManagerCalls_SpentTaskIDs_Call struct {
	*mock.Call
}

// SpentTaskIDs is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 string
func (_e *ServiceManagerCalls_Expecter) SpentTaskIDs(opts interface{}, arg0 interface{}) *ServiceManagerCalls_SpentTaskIDs_Call {
	return &ServiceManagerCalls_SpentTaskIDs_Call{Call: _e.mock.On("SpentTaskIDs", opts, arg0)}
}

func (_c *ServiceManagerCalls_SpentTaskIDs_Call) Run(run func(opts *bind.CallOpts, arg0 string)) *ServiceManagerCalls_SpentTaskIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(string))
	})
	return _c
}

func (_c *ServiceManagerCalls_SpentTaskIDs_Call) Return(_a0 bool, _a1 error) *ServiceManagerCalls_SpentTaskIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_SpentTaskIDs_Call) RunAndReturn(run func(*bind.CallOpts, string) (bool, error)) *ServiceManagerCalls_SpentTaskIDs_Call {
	_c.Call.Return(run)
	return _c
}

// StakeRegistry provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for StakeRegistry")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_StakeRegistry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StakeRegistry'
type ServiceManagerCalls_StakeRegistry_Call struct {
	*mock.Call
}

// StakeRegistry is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) StakeRegistry(opts interface{}) *ServiceManagerCalls_StakeRegistry_Call {
	return &ServiceManagerCalls_StakeRegistry_Call{Call: _e.mock.On("StakeRegistry", opts)}
}

func (_c *ServiceManagerCalls_StakeRegistry_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_StakeRegistry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_StakeRegistry_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_StakeRegistry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_StakeRegistry_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *ServiceManagerCalls_StakeRegistry_Call {
	_c.Call.Return(run)
	return _c
}

// Strategies provides a mock function with given fields: opts, arg0
func (_m *ServiceManagerCalls) Strategies(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	ret := _m.Called(opts, arg0)

	if len(ret) == 0 {
		panic("no return value specified for Strategies")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) (common.Address, error)); ok {
		return rf(opts, arg0)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, *big.Int) common.Address); ok {
		r0 = rf(opts, arg0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, *big.Int) error); ok {
		r1 = rf(opts, arg0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_Strategies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Strategies'
type ServiceManagerCalls_Strategies_Call struct {
	*mock.Call
}

// Strategies is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 *big.Int
func (_e *ServiceManagerCalls_Expecter) Strategies(opts interface{}, arg0 interface{}) *ServiceManagerCalls_Strategies_Call {
	return &ServiceManagerCalls_Strategies_Call{Call: _e.mock.On("Strategies", opts, arg0)}
}

func (_c *ServiceManagerCalls_Strategies_Call) Run(run func(opts *bind.CallOpts, arg0 *big.Int)) *ServiceManagerCalls_Strategies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(*big.Int))
	})
	return _c
}

func (_c *ServiceManagerCalls_Strategies_Call) Return(_a0 common.Address, _a1 error) *ServiceManagerCalls_Strategies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_Strategies_Call) RunAndReturn(run func(*bind.CallOpts, *big.Int) (common.Address, error)) *ServiceManagerCalls_Strategies_Call {
	_c.Call.Return(run)
	return _c
}

// ThresholdStake provides a mock function with given fields: opts
func (_m *ServiceManagerCalls) ThresholdStake(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for ThresholdStake")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceManagerCalls_ThresholdStake_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ThresholdStake'
type ServiceManagerCalls_ThresholdStake_Call struct {
	*mock.Call
}

// ThresholdStake is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *ServiceManagerCalls_Expecter) ThresholdStake(opts interface{}) *ServiceManagerCalls_ThresholdStake_Call {
	return &ServiceManagerCalls_ThresholdStake_Call{Call: _e.mock.On("ThresholdStake", opts)}
}

func (_c *ServiceManagerCalls_ThresholdStake_Call) Run(run func(opts *bind.CallOpts)) *ServiceManagerCalls_ThresholdStake_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *ServiceManagerCalls_ThresholdStake_Call) Return(_a0 *big.Int, _a1 error) *ServiceManagerCalls_ThresholdStake_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceManagerCalls_ThresholdStake_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *ServiceManagerCalls_ThresholdStake_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceManagerCalls creates a new instance of ServiceManagerCalls. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceManagerCalls(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceManagerCalls {
	mock := &ServiceManagerCalls{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
